--[[
ui_enemy_health allows the ability to show health progress of last hit enemy if they have db.storage[id].show_health = true

author: Alundaio
--]]

--
-- Added by Dancher
--
local monster_classes = {
	[clsid.bloodsucker_s] 			= "bloodsucker",
	[clsid.boar_s] 					= "boar",
	[clsid.burer_s] 				= "burer",
	[clsid.cat_s] 					= "cat",
	[clsid.chimera_s] 				= "chimera",
	[clsid.controller_s] 			= "controller",
	[clsid.dog_s] 					= "dog",
	[clsid.flesh_s] 				= "flesh",
	[clsid.fracture_s] 				= "fracture",
	[clsid.gigant_s] 				= "gigant",
	[clsid.poltergeist_s] 			= "poltergeist",
	[clsid.pseudodog_s] 			= "pseudodog",
	[clsid.psy_dog_phantom_s] 		= "psy_dog_phantom",
	[clsid.psy_dog_s] 				= "psy_dog",
	[clsid.rat]						= "rat",
	[clsid.rat_s]					= "rat",
	[clsid.snork_s] 				= "snork",
	[clsid.tushkano_s] 				= "tushkano",
	[clsid.zombie_s] 				= "zombie"
}

local progress = nil
local last_id = nil

local show_enemy_health_option = "enable_show_enemy_health"

local cs_enemy_health = "cs_enemy_health"

function has_progress_bar_shown()
	return progress ~= nil
end

function on_game_start()
	RegisterScriptCallback("monster_on_hit_callback",on_hit)
	RegisterScriptCallback("npc_on_hit_callback",on_hit)
	RegisterScriptCallback("heli_on_hit_callback",on_hit)
end 

function on_hit(obj,power,dir,who,bi)
	local st = db.storage[obj:id()]
	if not (st) then 
		return 
	end 
	
	if not (st.show_health) then
		-- show health progress for all objects hit by actor if option is enabled
		if (axr_main.config:r_value(MM_OPTIONS,show_enemy_health_option,1,false) == false) then
			return 
		end
	end
	
	-- in case object dies by something other than actor
	if (last_id and last_id == obj:id()) then 
		local cls = obj:clsid()
		local is_heli = IsHelicopter(nil,cls)
		local v = is_heli and obj:get_helicopter():GetfHealth() or obj.health or 0
		if (v <= 0.005) then
			cs_remove()
		end
	end
	
	if (who == nil or who:id() ~= 0) then 
		return 
	end
	
	local hud = get_cached_hud()
	if not (hud) then 
		return 
	end
	
	local cs = hud:GetCustomStatic(cs_enemy_health) 
	if (cs == nil) then 
		hud:AddCustomStatic(cs_enemy_health, true)
		local xml = CScriptXmlInit()
		xml:ParseFile("ui_enemy_health.xml")
		cs = hud:GetCustomStatic(cs_enemy_health)
		local w = cs:wnd()
		progress = xml:InitProgressBar("enemy_health", w)
	end
	
	if (bi == "from_death_callback") then
		last_id = nil
		progress = nil
		hud:RemoveCustomStatic(cs_enemy_health)
		return
	end
	
	local cls = obj:clsid()
	local is_heli = IsHelicopter(nil,cls)
	local v = is_heli and obj:get_helicopter():GetfHealth() or obj.health or 0
	if (v > 0.005) then 
		progress:Show(true)
		progress:SetProgressPos(v*100)
		local text = STR_EMPTY
		if (is_heli) then 
			text = game.translate_string("ui_st_helicopter")
		elseif (IsStalker(nil,cls)) then 
			text = obj:character_name()
		elseif (IsMonster(nil,cls)) then 
			local monster_section = obj:section()
			text = game.translate_string(monster_section)
			if (text == monster_section) then
				local monster_name = monster_classes[cls]
				if (monster_name ~= nil) then
					text = game.translate_string("ui_st_enemy_health_"..monster_name)
				else
					text = game.translate_string("monster")
				end
			end
		else 
			local sid = get_object_story_id(obj:id())
			if (sid) then 
				text = game.translate_string(sid)
			end
		end
		cs:wnd():TextControl():SetText(text)
		
		-- Auto-remove Custom Static after 30s unless hit again
		local enemy_health_ev_id = "ui_enemy_health"
		local enemy_health_act_id = "cs_remove"
		RemoveTimeEvent(enemy_health_ev_id,enemy_health_act_id)
		local function remove_me()
			cs_remove()
		end
		CreateTimeEvent(enemy_health_ev_id,enemy_health_act_id,10,remove_me)
		last_id = obj:id()
	else
		last_id = nil
		progress = nil
		hud:RemoveCustomStatic(cs_enemy_health)
	end
end

function cs_remove()
	last_id = nil
	progress = nil
	local hud = get_cached_hud()
	local cs = hud and hud:GetCustomStatic(cs_enemy_health) 
	if (cs) then
		hud:RemoveCustomStatic(cs_enemy_health)
	end
end