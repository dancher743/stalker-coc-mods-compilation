local priority_close = {
	_G.IsShotgun,
	_G.IsRifle,
	_G.IsPistol,
	_G.IsSniper,
	_G.IsLauncher
}

local priority_medium = {
	_G.IsRifle,
	_G.IsLauncher,
	_G.IsSniper,
	_G.IsShotgun,
	_G.IsPistol
}

local priority_far = {
	_G.IsSniper,
	_G.IsLauncher,
	_G.IsRifle,
	_G.IsPistol,
	_G.IsShotgun
}

local priority_heli = {
	_G.IsLauncher,
	_G.IsSniper,
	_G.IsRifle,
	_G.IsPistol,
	_G.IsShotgun
}

local priority_default = {
	_G.IsRifle,
	_G.IsSniper,
	_G.IsShotgun,
	_G.IsPistol,
	_G.IsLauncher
}

local cost_string = "cost"

-- if return game_object then it ignores engine. If return nil, then engine tries to find item to kill
-- called from engine!
function update_best_weapon(npc,cur_wpn)
	local st = db.storage[npc:id()]
	if not (st) then 
		return cur_wpn
	end 

	-- we want to choose new best_weapon every n seconds unless we don't have one
	local tg = time_global()
	if (cur_wpn and st._choose_bw_timer and tg < st._choose_bw_timer) then
		return cur_wpn
	end 
	
	local time_delta = 1500
	st._choose_bw_timer = tg+time_delta
	
	-- weapon priority
	local prior
	local be = npc:best_enemy()
	if (be) then 
		local be_position = be:position()
		local npc_position = npc:position()
		
		if (be_position:distance_to_sqr(npc_position) > 2500) then 
			prior = priority_far
		elseif (be_position:distance_to_sqr(npc_position) > 900) then 
			prior = priority_medium
		else
			prior = priority_close
		end
	elseif (axr_npc_vs_heli.is_under_npc_vs_heli(npc)) then
		prior = priority_heli
	else
		prior = priority_default
	end

	local weapon_list = {}
	
	local function itr(npc,wpn)
		if (IsWeapon(nil,wpn:clsid()) == false) then
			return false
		end
		
		-- usage actor's borrow items by a companion fix
		if (axr_companions.is_companion(npc)) then
			local borrow_items = alife_storage_manager.get_state().companion_borrow_item
			if (borrow_items and borrow_items[wpn:id()] ~= nil) then
				return false
			end
		end
		
		table.insert(weapon_list,wpn)
		
		return false
	end
	
	npc:iterate_inventory(itr,npc)
	
	if (#weapon_list == 0) then
		return 
	end
	
	local ini = system_ini()
	local cur_best_weapon
	
	for i=1,#prior do
		cur_best_weapon = nil
		local highest_cost
		for n,wpn in ipairs(weapon_list) do
			if (prior[i](wpn)) then
				local cost = ini:r_float_ex(wpn:section(),cost_string)
				if (highest_cost == nil or cost > highest_cost) then 
					--alun_utils.debug_nearest(npc,"cur_best_weapon=%s  now=%s",cur_best_weapon and cur_best_weapon:name(),wpn:name())
					highest_cost = cost
					cur_best_weapon = wpn
				end
			end
		end
		if (cur_best_weapon) then
			break
		end
	end
	
	if (cur_best_weapon) then
		--alun_utils.debug_nearest(npc,"cur_wpn=%s bw=%s",cur_wpn and cur_wpn:name(),cur_best_weapon and cur_best_weapon:name())
		return cur_best_weapon
	end

	return
end
