local current_inv_box
local current_se_inv_box

function can_transfer(item)
	return "transfer"
end

local function update_box()
	local function use_container()
		local hud = get_hud()
		if (hud) then
			hud:HideActorMenu()
		end
		current_inv_box:use(db.actor)
		return true -- destroy timed event
	end 
	
	-- Object will come online next update so wait
	CreateTimeEvent("foo","update_box",0,use_container)
end

function transfer(item)
	local transfer = {}
	
	local function iterator(inv_box, inv_item)
		if (item:section() == inv_item:section()) then
			table.insert(transfer,inv_item)
		end
	end

	current_inv_box:iterate_inventory_box(iterator, current_inv_box)
	
	for i,inv_item in ipairs(transfer) do
		current_inv_box:transfer_item(inv_item,db.actor)
	end
	
	update_box()
end

local function physic_object_on_use_callback(obj,who)
	if (IsInvbox(obj)) then
		printf("Hello Dancher! 1")
		current_se_inv_box = alife_object(obj:id())
		local inv_box = level.object_by_id(current_se_inv_box.id)
		if (inv_box) then
			current_inv_box = inv_box
			printf("Hello Dancher! 2")
		end
	end
end

function on_game_start()
	RegisterScriptCallback("physic_object_on_use_callback",physic_object_on_use_callback)
end