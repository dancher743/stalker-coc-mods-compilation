--
-- Offline Alife for squads
-- Added by Dancher
-- Special thanks to AMK Offline Alife and EOC mod!
--

local combat_distance = 30*30
local inc_rank_points = 20
local handicap_chance = 0.2

local update_timer
local updated_levels = {}
local squads_to_levels
local squads_to_combat

local rank_power = {
	novice = 10,
	trainee = 20,
	experienced = 30,
	professional = 40,
	veteran = 50,
	expert = 60,
	master = 70,
	legend = 80,
	-- monsters
	weak = 20,
	normal = 40,
	strong = 60
}

local function calculate_squad_power(squad)
	local power = 0
	for k in squad:squad_members() do
		local se_obj = alife():object(k.id)
		if (se_obj) then
			local rank_name = ranks.get_se_obj_rank_name(se_obj)
			power = power + rank_power[rank_name] or 0
		end
	end
	if (math.random() < handicap_chance) then
		power = power * math.random(3)
	end
	return power
end

-- from Anomaly 1.5.1.2
local function get_random_npc(squad)
	local squad_npcs = {}
	for k in squad:squad_members() do
		squad_npcs[#squad_npcs+1] = k.id
	end
	return alife_object(squad_npcs[math.random(#squad_npcs)])
end

local function process_combat(squad1, squad2)
	local squad1_community = squad1:get_squad_community()
	local squad2_community = squad2:get_squad_community()
	local are_enemies = game_relations.is_factions_enemies(squad1_community, squad2_community)
	if (not are_enemies) then
		return
	end
	
	local distance = squad1.position:distance_to_sqr(squad2.position)
	if (distance > combat_distance) then
		return
	end
	
	if (get_object_story_id(squad1.id) or get_object_story_id(squad2.id)) then
		return
	end
	
	local killer_squad, victim_squad
	local squad1_power = calculate_squad_power(squad1)
	local squad2_power = calculate_squad_power(squad2)
	
	if (squad1_power > squad2_power) then
		killer_squad = squad1
		victim_squad = squad2
		printf("### Dancher: %s(%s) kills %s(%s) (%s) ###", squad1:name(), squad1_power, squad2:name(), squad2_power, simulation_objects.get_level_name(squad1))
	elseif (squad1_power < squad2_power) then
		killer_squad = squad2
		victim_squad = squad1
		printf("### Dancher: %s(%s) kills %s(%s) (%s) ###", squad2:name(), squad2_power, squad1:name(), squad1_power, simulation_objects.get_level_name(squad2))
	else
		printf("### Dancher: %s(%s) tie %s(%s) (%s) ###", squad1:name(), squad1_power, squad2:name(), squad2_power, simulation_objects.get_level_name(squad1))
		return
	end
	
	game_relations.drx_df_faction_npc_on_death(killer_squad:get_squad_community(), victim_squad:get_squad_community())
	local se_killer = get_random_npc(killer_squad)
	for k in victim_squad:squad_members() do
		local se_obj = alife_object(k.id)
		if (se_obj) then
			se_obj:on_death(se_killer)
		end
	end
	
	for k in killer_squad:squad_members() do
		if (se_obj and not IsMonster(nil,se_obj:clsid())) then
			se_obj:set_rank(se_obj:rank() + inc_rank_points)
		end
	end
	
	return victim_squad.id
end

local function process_squads_combat()
	local squads_count = #squads_to_combat
	
	for i=1,squads_count do
		local squad1 = squads_to_combat[i]
		
		if (squad1) then
			for j=1,squads_count do
				local squad2 = squads_to_combat[j]
				
				if (squad2 and squad1.id ~= squad2.id and 
					simulation_objects.is_on_the_same_level(squad1, squad2)) 
				then
					local victim_id = process_combat(squad1,squad2)
					
					if (victim_id == squad1.id) then
						squads_to_combat[i] = nil
						break
					elseif (victim_id == squad2.id) then
						squads_to_combat[j] = nil
					end
				end
			end
		end
	end
end

local function actor_on_first_update()
	update_timer = time_global() + 1000
end

local function actor_on_slicing_update()
	local tg = time_global()
	
	if (tg < update_timer) then
		return
	end
	
	update_timer = tg + math.random(10000,15000)
	
	if (squads_to_levels == nil) then
		squads_to_levels = {}
		for _,squad in pairs(SIMBOARD.squads) do
			if (squad and not squad.online and squad.first_update and squad:alive()) then
				local level_id = simulation_objects.get_level_id(squad)
				if (squads_to_levels[level_id] == nil) then
					squads_to_levels[level_id] = {}
				end
				table.insert(squads_to_levels[level_id], squad)
			end
		end
		utils.shuffle_table(squads_to_levels)
	end
	
	local level_to_update
	
	for id,_ in pairs(squads_to_levels) do
		if (updated_levels[id] == nil) then
			level_to_update = id
			break
		end
	end
	
	if (level_to_update == nil) then
		empty_table(updated_levels)
		printf("### Dancher: restart offline squads combat ###")
		return
	end
	
	squads_to_combat = squads_to_levels[level_to_update]
	
	if (#squads_to_combat > 0) then
		printf("### Dancher: process offline squads combat ###", level_to_update)
		process_squads_combat()
	end
	
	squads_to_combat = nil
	updated_levels[level_to_update] = true
end

function on_game_start()
	RegisterScriptCallback("actor_on_first_update",actor_on_first_update)
	RegisterScriptCallback("actor_on_slicing_update",actor_on_slicing_update)
end
