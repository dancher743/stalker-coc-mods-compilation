--
-- Offline Alife for squads
-- Added by Dancher
-- Special thanks to AMK Offline Alife and EOC mod!
--

local squads_to_combat_per_level = 10
local combat_distance = 30*30
local update_timer
local available_levels = 
{
	["k00_marsh"] = true,
	["k01_darkscape"] = true,
	["k02_trucks_cemetery"] = true,
	["l01_escape"] = true,
	["l02_garbage"] = true,
	["l03_agroprom"] = true,
	["l04_darkvalley"] = true,
	["l05_bar"] = true,
	["l06_rostok"] = true,
	["l07_military"] = true,
	["l08_yantar"] = true,
	["l09_deadcity"] = true,
	["l10_limansk"] = true,
	["l10_radar"] = true,
	["l10_red_forest"] = true,
	["l11_hospital"] = true,
	["l11_pripyat"] = true,
	["l12_stancia"] = true,
	["l12_stancia_2"] = true,
	["l13_generators"] = true,
	["zaton"] = true,
	["jupiter"] = true,
	["pripyat"] = true,
	["jupiter_underground"] = true,
	["labx8"] = true,
	["l03u_agr_underground"] = true,
	["l04u_labx18"] = true,
	["l08u_brainlab"] = true,
	["l10u_bunker"] = true,
	["l12u_control_monolith"] = true,
	["l12u_sarcofag"] = true,
	["l13u_warlab"] = true
}
local updated_levels = {}
local squads_to_combat = {}

local function process_combat(squad1, squad2)
	local squad1_community = squad1:get_squad_community()
	local squad2_community = squad2:get_squad_community()
	local are_enemies = game_relations.is_factions_enemies(squad1_community, squad2_community)
	
	if (not are_enemies) then
		return
	end
	
	local distance = squad1.position:distance_to_sqr(squad2.position)
	
	if (distance > combat_distance or
		(squad1:npc_count() == 0 or squad2:npc_count() == 0) or
		(get_object_story_id(squad1.id) or get_object_story_id(squad2.id)) or
		(squad1:alive() == false or squad2:alive() == false)) then
		return
	end
	
	local chance = math.random()
	if (chance < 0.1) then
		game_relations.drx_df_faction_npc_on_death(squad1:get_squad_community(), squad2:get_squad_community())
		for k in squad2:squad_members() do
			local se_obj = alife_object(k.id)
			if (se_obj) then
				se_obj.health = 0
			end
		end
		printf("### Dancher: %s has killed by %s ###", squad2:name(), squad1:name())
		return
	end
	
	chance = math.random()
	if (chance < 0.1) then
		game_relations.drx_df_faction_npc_on_death(squad2:get_squad_community(), squad1:get_squad_community())
		for k in squad1:squad_members() do
			local se_obj = alife_object(k.id)
			if (se_obj) then
				se_obj.health = 0
			end
		end
		printf("### Dancher: %s has killed by %s ###", squad2:name(), squad1:name())
	end
end

local function process_squads_combat()
	local squads_count = #squads_to_combat
	
	for i=1,squads_count do
		local squad1 = squads_to_combat[i]
		
		for j=1,squads_count do
			local squad2 = squads_to_combat[j]
			
			if (squad1.id ~= squad2.id) then
				process_combat(squad1,squad2)
			end
		end
	end
end

local function actor_on_slicing_update()
	local tg = time_global()
	
	if (update_timer and tg < update_timer) then
		return
	end
	update_timer = tg + 5000
	
	local level_to_update
	
	for id,_ in pairs(available_levels) do
		if (updated_levels[id] == nil) then
			level_to_update = id
			break
		end
	end
	
	if (level_to_update == nil) then
		empty_table(updated_levels)
		printf("### Dancher: restart offline squads combat ###")
		return
	end
	
	iempty_table(squads_to_combat)
	
	local counter = 0
	for id,squad in pairs(SIMBOARD.squads) do
		if (squad and not squad.online and squad.first_update) then
			local level = simulation_objects.get_level_name(squad)
			if (level == level_to_update) then
				table.insert(squads_to_combat, squad)
				counter = counter + 1
			end
		end
		if (counter == squads_to_combat_per_level) then
			break
		end
	end
	
	if (#squads_to_combat > 0) then
		printf("### Dancher: process offline squads combat on %s ###", level_to_update)
		process_squads_combat()
	end
	
	updated_levels[level_to_update] = true
end

local function save_state(data)
	if (data.squads_offline_combat == nil) then
		data.squads_offline_combat = {}
	end
	data.squads_offline_combat.updated_levels = updated_levels
end

local function load_state(data)
	local squads_offline_combat = data.squads_offline_combat
	if (squads_offline_combat and squads_offline_combat.updated_levels) then
		updated_levels = squads_offline_combat.updated_levels
	end
end

function on_game_start()
	RegisterScriptCallback("actor_on_slicing_update",actor_on_slicing_update)
	RegisterScriptCallback("save_state",save_state)
	RegisterScriptCallback("load_state",load_state)
end
