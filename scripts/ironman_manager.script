-- =======================================================================================
-- Created by Tronex
-- Last modification: 2018/5/23
-- This script grants new lives for ironman playthroughs with enabled life cycle
-- =======================================================================================

local time_factor = 1
local granted_lives = 0 
local sleep_hrs = 0
local life_cycle = 120
local life_feature = false

function set_sleep_hrs(hrs) -- called by (ui_sleep_dialog.script)
	sleep_hrs = sleep_hrs + hrs
end

function ironman_timer()
	
	ResetTimeEvent(0,"IronManTimer",5*time_factor) -- reset every 5 minutes
	
	if (not db.actor) or (not USE_MARSHAL)then 
		return true 
	end
	
	local s_time = level.get_start_time()
	local seconds = tonumber(game.get_game_time():diffSec(s_time))
	local hours = math.floor(seconds/60/60)
	local true_hrs = hours - sleep_hrs
	local fc = math.floor(true_hrs/life_cycle)
	if (granted_lives < fc) then
		local death_count = alife_storage_manager.get_state().death_count or 0
		alife_storage_manager.get_state().death_count = death_count - 1
		granted_lives = granted_lives + 1
		--printf(">>> Tronex: New life granted! new lives so far: " .. granted_lives)
	end
	--printf(">>> Tronex: fc: " .. fc .. " | true hrs: " .. true_hrs .. " | hours: " .. hours .. " | death_count: " .. tostring(alife_storage_manager.get_state().death_count) .. " | deeath_limit: " .. tostring(alife_storage_manager.get_state().death_limit) .. " | life_feature: " .. tostring(life_feature) .. " | life_cycle: " .. tostring(life_cycle))
	
	return false
end

--========================================< Callbacks >========================================--
local function save_state(m_data)
	if (not IsIronManMode()) then
		UnregisterScriptCallback("save_state",save_state)
		return
	end
	
	m_data.ironman_sleep_hrs = sleep_hrs
	m_data.ironman_granted_lives = granted_lives
	m_data.ironman_life_cycle = life_cycle
	m_data.ironman_life_feature = life_feature
end

local function load_state(m_data)
	if (not IsIronManMode()) then
		UnregisterScriptCallback("load_state",load_state)
		return
	end
	
	sleep_hrs = m_data.ironman_sleep_hrs or sleep_hrs
	granted_lives = m_data.ironman_granted_lives or granted_lives
	life_cycle = m_data.ironman_life_cycle or life_cycle
	life_feature = m_data.ironman_life_feature or life_feature
	--printf(">>> Tronex: load_state | sleep_hrs: " .. tostring(sleep_hrs) .. " | granted_lives: " .. tostring(granted_lives) .. " | life_cycle: " .. tostring(life_cycle) .. " | life_feature: " .. tostring(life_feature))
end

local function on_game_load()
	if (not IsIronManMode()) or (not life_feature) then
		UnregisterScriptCallback("on_game_load",on_game_load)
		return
	end
	if _G.GAME_VERSION == "1.4.16" then
		time_factor = level.get_time_factor()
	end
	CreateTimeEvent(0,"IronManTimer",10*time_factor,ironman_timer)
end

local function actor_on_before_death() -- Ironman: second wind
	if not (USE_MARSHAL) then
		return
	end
	
	local uuid = alife_storage_manager.get_state().uuid
	if not (uuid) then
		UnregisterScriptCallback("actor_on_before_death",actor_on_before_death)
		return -- not in hardcore mode
	end
	
	local fs = getFS()
	local flist = fs:file_list_open_ex("$game_saves$",bit_or(FS.FS_ListFiles,FS.FS_RootOnly),"*.scoc")
	local f_cnt = flist:Size()

	local file_ext = ".scoc"
	local file_path = fs:update_path('$game_saves$', '').."%s"..file_ext
	local file_r_mode = "rb"
	local file_r_format = "*all"
	local file_w_mode = "wb"
	
	flist:Sort(FS.FS_sort_by_modif_down)
	
	for	it=0, f_cnt-1 	do
		local file = flist:GetAt(it)
		local file_name = string.sub(file:NameFull(), 0, (string.len(file:NameFull()) - string.len(file_ext)))

		--printf("file_name = %s",file_name)
		local path = string.format(file_path,file_name)
		local f = io.open(path,file_r_mode)
		if (f) then
			local data = f:read(file_r_format)
			f:close()
			if (data) then
				local decoded = alife_storage_manager.decode(data)
				if (decoded and decoded.uuid == uuid) then
					decoded.death_limit = decoded.death_limit or 3
					decoded.death_count = (decoded.death_count or 0) + 1
					if (decoded.death_count >= decoded.death_limit) then
						ui_load_dialog.delete_save_game(file_name)	
					else
						local f = io.open(path,file_w_mode)
						if (f) then
							local encoded = marshal.encode(decoded)
							if (encoded) then 
								f:write(encoded)
							end
							f:close()
						end
					end
				end
			end
		end
	end
end

function on_game_start()
	RegisterScriptCallback("save_state",save_state)
	RegisterScriptCallback("load_state",load_state)
	RegisterScriptCallback("on_game_load",on_game_load)
	RegisterScriptCallback("actor_on_before_death",actor_on_before_death)
end