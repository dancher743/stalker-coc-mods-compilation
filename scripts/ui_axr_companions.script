--------------------------------------------------
-- Companions List
-- From Anomaly 1.5.1.2
--------------------------------------------------
local HUD = nil

function activate_hud()
	if HUD == nil then
		HUD = UICompanionList()
		get_hud():AddDialogToRender(HUD)
	end
end

function deactivate_hud()
	if HUD ~= nil then
		get_hud():RemoveDialogToRender(HUD)
		HUD:Clear()
		HUD = nil
	end
end

local function actor_on_net_destroy()
	deactivate_hud()
end

local function actor_on_weapon_zoom_in(item)
	if HUD ~= nil then
		HUD:Show(false)
	end
end 

local function actor_on_weapon_zoom_out(item)
	if HUD ~= nil then
		HUD:Show(true)
	end
end

function on_game_start()
	RegisterScriptCallback("actor_on_net_destroy",actor_on_net_destroy)
	RegisterScriptCallback("actor_on_weapon_zoom_in",actor_on_weapon_zoom_in)
	RegisterScriptCallback("actor_on_weapon_zoom_out",actor_on_weapon_zoom_out)
end

---------------------------------------
class "UICompanionList" (CUIScriptWnd)

function UICompanionList:__init() super()
	self.max_size = 15
	self.companion_info = {}
	self.update_rate	= 1000 --[ms]
	self.clr_list = {
		["def"]     = GetARGB(255,255,255,255),
		["stalker"] = GetARGB(255,255,255,100),
		["bandit"]  = GetARGB(255,120,201,79),
		["ecolog"]  = GetARGB(255,255,128,100),
		["csky"]    = GetARGB(255,100,200,255),
		["dolg"]    = GetARGB(255,255,100,100),
		["freedom"] = GetARGB(255,100,255,100),
		["killer"]  = GetARGB(255,100,100,255),
		["army"]    = GetARGB(255,100,128,255),
		["monolith"]= GetARGB(255,120,201,79),
		["zombied"] = GetARGB(168,168,168,255),
	}
	self.hud_option_name = "companions_hud"

	self:InitControls()
	
	local function tickback()
		self:CustomUpdate()
	end
	StartTimer("UICompanionListTimer", self.update_rate, tickback)
end

function UICompanionList:Clear()
	StopTimer("UICompanionListTimer")
end

function UICompanionList:__finalize()
end

function UICompanionList:InitControls()
	local xml = CScriptXmlInit()
	xml:ParseFile("ui_companion_list.xml")

	self.dialog = xml:InitStatic("companion_list", self)
	--utils_xml.correct_ratio(self.dialog, true)
	
	self.companion_info = {}
	local x_offset = 0
	local y_offset = 0
	for i=1,self.max_size do
		self.companion_info[i]                   = {}
		self.companion_info[i].base              = xml:InitStatic("companion_list:slot", self.dialog)
		self.companion_info[i].background        = xml:InitStatic("companion_list:slot:background", self.companion_info[i].base)
		self.companion_info[i].icon        		 = xml:InitStatic("companion_list:slot:icon", self.companion_info[i].base)
		self.companion_info[i].danger_indicator  = xml:InitStatic("companion_list:slot:danger_indicator", self.companion_info[i].base)
		self.companion_info[i].invulnerable_shadow = xml:InitStatic("companion_list:slot:invulnerable", self.companion_info[i].base)
		self.companion_info[i].invulnerable      = xml:InitStatic("companion_list:slot:invulnerable", self.companion_info[i].base)
		self.companion_info[i].team_role_shadow  = xml:InitStatic("companion_list:slot:team_role", self.companion_info[i].base)
		self.companion_info[i].team_role         = xml:InitStatic("companion_list:slot:team_role", self.companion_info[i].base)
		self.companion_info[i].distance          = xml:InitTextWnd("companion_list:slot:distance", self.companion_info[i].base)
		self.companion_info[i].prog_health       = xml:InitProgressBar("companion_list:slot:health", self.companion_info[i].base)
		
		for _,ele in pairs(self.companion_info[i]) do
			utils_xml.correct_ratio(ele)
		end
		
		local h = self.companion_info[i].background:GetHeight()
		self.companion_info[i].distance:SetFont(GetFontSmall())
		
		local base = self.companion_info[i].base
		if (i > 1 and utils.fmod(i, 5) == 1) then
			local w_base = base:GetWidth()
			x_offset = x_offset + w_base + 5
			y_offset = 0
		end
		y_offset = y_offset + 1
		base:SetWndPos( vector2():set( x_offset , y_offset*(h+5) ) )
		
		local pos = self.companion_info[i].team_role:GetWndPos()
		self.companion_info[i].team_role_shadow:SetWndPos( vector2():set( pos.x + 1 , pos.y + 2 ) )
		self.companion_info[i].team_role_shadow:SetTextureColor( GetARGB(255, 0, 0, 0) )
		
		pos = self.companion_info[i].invulnerable:GetWndPos()
		self.companion_info[i].invulnerable_shadow:SetWndPos( vector2():set( pos.x + 1 , pos.y + 2 ) )
		self.companion_info[i].invulnerable_shadow:SetTextureColor( GetARGB(255, 0, 0, 0) )
		
		self.companion_info[i].invulnerable:InitTexture("ui_hud_icon_shield")
		self.companion_info[i].invulnerable_shadow:InitTexture("ui_hud_icon_shield")
		
		self.companion_info[i].base:Show(false)
	end
end

function UICompanionList:CustomUpdate()
	local is_option_enabled = axr_main_options.get_check_option(self.hud_option_name)
	
    if (not is_option_enabled or not main_hud_shown()) then
        self.dialog:Show(false)
        return
    else
        self.dialog:Show(true)
    end
	
	local clist = axr_companions.list_actor_squad_with_se_obj()
	local clist_index = #clist
	
	for i=1,#self.companion_info do
		local se_obj
		
		for j=clist_index,1,-1 do
			clist_index = clist_index - 1
			se_obj = clist[j]
			break
		end
		
		if (se_obj and IsStalker(nil,se_obj:clsid()) and se_obj:alive()) then
			local st = db.storage[se_obj.id]
			local npc = st and st.object
			local ele = self.companion_info[i]
			
			-- Icon
			local icon_name = npc and npc:character_icon() or se_obj:character_icon()
			icon_name = icon_name and icon_name ~= STR_EMPTY and icon_name or "ui\\anomaly\\ui_noise"
			ele.icon:InitTexture(icon_name)
			
			-- Distance
			ele.distance:SetText(string.format("%.2f M", se_obj.position:distance_to(db.actor:position())))

			-- Leader and relation status
			local squad = se_obj.group_id and se_obj.group_id ~= 65535 and alife_object(se_obj.group_id)
			if (squad and squad:commander_id() == se_obj.id) then
				ele.team_role:InitTexture("ui_minimap_squad_leader")
				ele.team_role_shadow:InitTexture("ui_minimap_squad_leader")
			else
				ele.team_role:InitTexture("ui_minimap_point")
				ele.team_role_shadow:InitTexture("ui_minimap_point")
			end
			
			local community = npc and npc:character_community()
			local clr = community and self.clr_list[community] or self.clr_list["def"]
			ele.team_role:SetTextureColor(clr)
			
			-- Invulnerable
			if (axr_companions.is_invulnerable(se_obj)) then
				ele.invulnerable:SetTextureColor(clr)
				ele.invulnerable:Show(true)
				ele.invulnerable_shadow:Show(true)
			else
				ele.invulnerable:Show(false)
				ele.invulnerable_shadow:Show(false)
			end
			
			-- Health
			if (npc) then 
				local health = utils.clamp(round_idp(npc.health,1),0,1)
				ele.prog_health:SetProgressPos( health )
			end
			
			-- Danger state
			ele.danger_indicator:Show(npc and npc:best_enemy() and true or false)
			
			self.companion_info[i].base:Show(true)
		else 
			self.companion_info[i].base:Show(false)
		end
	end
end
