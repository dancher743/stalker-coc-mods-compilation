----------------------
-- File: Disguise System
-- Author: strelocc
-- Adapted and improved for Anomaly: seargedp
-- Tweaked for CoC 1.4.22: SarisKhan
-- Reworked due to patch dressing feature: Dancher
----------------------

--time you need to be hidden (not seen by any npc) before changing outfit to make the disguise effective, 100 means roughly 10 seconds
local time_to_forget = 100

--minimum condition for an outfit to work as disguise
--set to 0 to not consider outfit condition, if you want only mint condition outfits to work set to 0.99 and not 1 because condition can never be exactly 1
local min_condition_o = 0.25

--minimum condition for an helmet to reduce suspicion buildup
--set to 0 to not consider helmet condition, if you want only mint condition helmets to work set to 0.99 and not 1 because condition can never be exactly 1
local min_condition_h = 0.25

--distance within npc will start doubting the disguise (if they are seeing you)
--5 = 1 wood box width
local discovery_distance = 25

--how much time it takes to be discovered when in view, 100 is roughly 1 minute with uncovered face
local suspicion_limit = 100
local warning_limit = suspicion_limit * 2 / 3
local dewarn_limit = suspicion_limit * 1 / 3

local last_seen = {}
local suspicion = {}
local callout = false
local warned = false

local patch_sections

-- results of try_change_community() function
local same = 0
local returned = 1
local see = 2
local remember = 3
local changed = 4

function on_game_start()
	RegisterScriptCallback("npc_on_update",npc_update)
	
	RegisterScriptCallback("on_game_load",on_game_load)
	RegisterScriptCallback("save_state",save_state)
	RegisterScriptCallback("load_state",load_state)
	
	RegisterScriptCallback("actor_item_to_slot",actor_item_to_slot)
	RegisterScriptCallback("actor_item_to_ruck",actor_item_to_ruck)
end

function on_game_load()
	--printf("DBG on_game_load")
	local defaults = {
		disguise_system = {
			ds_default_faction = default_faction or character_community(db.actor):sub(7) or "stalker",
			ds_last_seen = last_seen,
			ds_suspicion = suspicion,
			ds_callout = callout,
			ds_warned = warned,
		}
	}
	load_state(defaults)
	--printf("DBG default " .. (default_faction or "?"))
end

function actor_item_to_slot(item)
	if not db.actor:alive() or not IsPatch(item) then
		return
	end
	
	local patch_community = system_ini():r_string_ex(item:section(),"community")
	local result_type = try_change_community(patch_community)
	
	if result_type == same then
		return
	end
	
	hide_actor_menu_lazy("slot",result_type,patch_community)
end

function actor_item_to_ruck(item)
	if not db.actor:alive() or not IsPatch(item) then
		return
	end

	local patch_community = default_faction
	local result_type = try_change_community(patch_community)
	
	if result_type == same then
		return
	end
	
	hide_actor_menu_lazy("ruck",result_type,patch_community)
end

function try_change_community(community)
	local result_type
	
	if community == utils.get_actor_community() then
		result_type = same
	elseif community == default_faction then
		db.actor:set_character_community( ("actor_" .. community), 0, 0 )
		suspicion = {}
		callout = true
		warned = true
		result_type = returned
	elseif anybody_see() then
		result_type = see
	elseif anybody_remember() then
		result_type = remember
	else
		db.actor:set_character_community( ("actor_" .. community), 0, 0 )
		suspicion = {}
		callout = false
		warned = false
		result_type = changed  
	end
	
	return result_type
end

function hide_actor_menu_lazy(act_id,result_type,community)
	local function hide_actor_menu()
		local hud = get_hud()
		if (hud) then
			hud:HideActorMenu()
			printf("actor_item_to_slot -> "..result_type)
			show_message(result_type, community)
		end
		return true
	end
	CreateTimeEvent("disguise","hide_actor_menu_when_to_"..act_id,0.1,hide_actor_menu)
end

function show_message(type, community)
	if type == same then
		return
	elseif type == returned then
		--news_manager.send_tip(db.actor, "You're now identified as a member of " .. game.translate_string(default_faction) .. " again.", nil, nil, 5000)
		--SetHudMsg("You're now identified as a member of " .. game.translate_string(default_faction) .. " again.", 5)
		SetHudMsg("returned", 5)
	elseif type == see then
		--news_manager.send_tip(db.actor, "You have been seen changing outfit, everybody remembers you as a " .. game.translate_string(community) .." --member.", nil, nil, 5000)
		--SetHudMsg("You have been seen changing outfit, everybody remembers you as a " .. game.translate_string(community) ..", 5)
		SetHudMsg("see", 5)
	elseif type == remember then
		--[[news_manager.send_tip(db.actor, "You have been seen recently, everybody remembers you as a " .. game.translate_string(community) .." member.", nil, nil, 5000)]]
		--SetHudMsg("You have been seen recently, everybody remembers you as a " .. game.translate_string(community) .." member.", 5)
		SetHudMsg("remember", 5)
	elseif type == changed then
		--news_manager.send_tip(db.actor, "With this outfit people will assume you're a member of the " .. game.translate_string(community) .. " faction.", nil, nil, --5000)
		--SetHudMsg("With this outfit people will assume you're a member of the " .. game.translate_string(community) .. " faction.", 5)
		SetHudMsg("changed", 5)
	end
end

function anybody_see()
	for i=1, #db.OnlineStalkers do
		npc = level.object_by_id(db.OnlineStalkers[i])
		if (npc and IsStalker(npc,npc:clsid()) and npc:alive()) then
			if(npc:see(db.actor)) then
				return true
			end
		end
	end
	return false
end

function anybody_remember()
	local time_passed
	for k,v in pairs(last_seen) do
		if(v)then
			time_passed = game.get_game_time():diffSec(v)
			if( time_passed < time_to_forget) then
				return true
			else
				last_seen[k] = nil
			end
		end
	end
	return false
end

function npc_update(npc)
	if not default_faction or not db.actor then return end
	
	local npc_is_enemy = game_relations.is_factions_enemies(default_faction, npc:character_community()) or npc:relation(db.actor) == game_object.enemy

	local current = character_community(db.actor):sub(7)
	if current ~= default_faction and npc:see(db.actor) and npc_is_enemy then
		local id = npc:id()
		last_seen[id] = game.get_game_time()
		
		if suspicion[id] then
			local distance = npc:position():distance_to_sqr(db.actor:position())
			suspicion[id] = suspicion[id] + suspicion_increase(distance)
			
			if (suspicion[id] > suspicion_limit) then
				db.actor:set_character_community( ("actor_" .. default_faction), 0, 0 )
				if not callout then 
					news_manager.send_tip(db.actor, "You have been discovered! Everybody knows you are a " .. game.translate_string(default_faction) .." member in disguise.", nil, nil, 5000) 
					--printf("discovered at %s",os.date("%X"))
					callout = true
					warned = true
				end
			elseif not warned and suspicion[id] > warning_limit then
				news_manager.send_tip(db.actor, "You are getting suspicious looks. Someone may see through your disguise if you are not careful.", nil, nil, 5000) 
				warned = true
			end
		else
			--printf("saw at %s",os.date("%X"))
			suspicion[id] = 1
		end
	else
		local id = npc:id()
		if suspicion[id] then
			suspicion[id] = suspicion[id] - 1
			if (suspicion[id] <= 0) then
				suspicion[id] = nil
			end
		end
	end

	if warned and current ~= default_faction then
		local suspicious = false
		for k,v in pairs(suspicion) do
			if v and v > dewarn_limit then
				suspicious = true
				break
			end
		end
		if not suspicious then
			news_manager.send_tip(db.actor, "You have narrowly avoided exposure. For now, your disguise remains effective.", nil, nil, 5000) 
			warned = false
		end
	end
end

function suspicion_increase(distance)
	local increase = 1
	
	if(distance > discovery_distance) then
		increase = 0
	else
		local helm = db.actor:item_in_slot(12)
		local outfit = db.actor:item_in_slot(7)
		local has_helm_hides = helm and (helm:condition() > min_condition_h)
		local has_outfit_hides = outfit and (outfit:condition() > min_condition_o)
		local actor_community = utils.get_actor_community()
		
		if not has_helm_hides and has_outfit_hides then
			has_helm_hides = alun_utils.read_from_ini(nil,outfit:section(),"helmet_avaliable","bool",false)
		end
		
		if has_helm_hides then
			increase = increase - 0.25
		end
		
		if has_outfit_hides then
			local value = 0.25
			
			if is_outfit_fits(actor_community, outfit:section()) then
				value = value + 0.25
			end
		
			increase = increase - value
		end
	end
	
	--printf("DBG suspicion increased: "..increase)
	return increase
end

function is_outfit_fits(npc_community, outfit) -- where outfit is section
	local outfit_community = ""
	
	if(string.match(outfit,"specops_") or string.match(outfit,"military_")) then
		outfit_community = "army"
	elseif(string.match(outfit,"bandit_") or string.match(outfit,"trenchcoat_") or string.match(outfit,"banditmerc_")) then
		outfit_community = "bandit"
	elseif(string.match(outfit,"cs_")) then
		outfit_community = "csky"	
	elseif(string.match(outfit,"svoboda_")) then
		outfit_community = "freedom"	
	elseif(string.match(outfit,"ecolog_")) then
		outfit_community = "ecolog"	
	elseif(string.match(outfit,"dolg_")) then
		outfit_community = "dolg"
	elseif(string.match(outfit,"merc_")) then
		outfit_community = "killer"
	elseif(string.match(outfit,"stalker_") or string.match(outfit,"scientific_") or string.match(outfit,"exo_")) then
		outfit_community = "stalker"
	elseif(string.match(outfit,"monolith_")) then
		outfit_community = monolith
	end
	
	return outfit_community == npc_community
end

function save_state(data)
	--printf("DBG save_state")
	data.disguise_system = {}
	data.disguise_system.ds_default_faction = default_faction
	data.disguise_system.ds_callout = callout
	data.disguise_system.ds_warned = warned
	data.disguise_system.ds_last_seen = last_seen
	data.disguise_system.ds_suspicion = suspicion

	--printf("DBG default " .. (default_faction or "?"))
end

function load_state(data)
	--printf("DBG load_state")
	if not data.disguise_system then return end
	default_faction = data.disguise_system.ds_default_faction
	callout = data.disguise_system.ds_callout
	warned = data.disguise_system.ds_warned or callout

	if not default_faction or default_faction == "" then
		default_faction = db.actor and character_community(db.actor):sub(7) or ""
		printf("DBG loaded default " .. (default_faction or "?"))
	end

	local last_seen_load = data.disguise_system.ds_last_seen
	last_seen = {}
	for k,v in pairs(last_seen_load) do
		if v then
			last_seen[k] = v
		end
	end

	local suspicion_load = data.disguise_system.ds_suspicion
	suspicion = {}
	for k,v in pairs(suspicion_load) do
		if v then
			suspicion[k] = v
		end
	end

	--printf("DBG default " .. (default_faction or "?"))
end

function IsPatch(obj)
	if not (patch_sections) then
		patch_sections = {
			["csky_patch"] 			= true,
			["freedom_patch"] 		= true,
			["stalker_patch"] 		= true,
			["ecolog_patch"] 			= true,
			["bandit_patch"] 			= true,
			["duty_patch"] 			= true,
			["monolith_patch"] 		= true,
			["army_patch"] 			= true,
			["merc_patch"] 			= true
		}
	end
	return obj and patch_sections[obj:section()] or false
end
