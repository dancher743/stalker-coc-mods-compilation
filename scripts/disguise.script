----------------------
-- File: Disguise System
-- Author: strelocc
-- Adapted and improved for Anomaly: seargedp
-- Tweaked for CoC 1.4.22: SarisKhan
-- Reworked due to patch dressing feature: Dancher
----------------------

--time you need to be hidden (not seen by any npc) before changing outfit to make the disguise effective, 100 means roughly 10 seconds
local time_to_forget = 100

--minimum condition for an outfit to work as disguise
--set to 0 to not consider outfit condition, if you want only mint condition outfits to work set to 0.99 and not 1 because condition can never be exactly 1
local min_condition_o = 0.25

--minimum condition for an helmet to reduce suspicion buildup
--set to 0 to not consider helmet condition, if you want only mint condition helmets to work set to 0.99 and not 1 because condition can never be exactly 1
local min_condition_h = 0.25

--distance within npc will start doubting the disguise (if they are seeing you)
--5 = 1 wood box width
local discovery_distance = 25

--how much time it takes to be discovered when in view, 100 is roughly 1 minute with uncovered face
local suspicion_limit = 100
local warning_limit = suspicion_limit * 2 / 3
local dewarn_limit = suspicion_limit * 1 / 3

local last_seen = {}
local suspicion = {}
local callout = false
local warned = false

local patch_slot_number = 14
local prev_patch_in_slot

local does_anybody_see = false
local does_anybody_remember = false

local default_faction
local disguise_community

local patch_sections = {
	["csky_patch"] 			= "csky",
	["freedom_patch"] 		= "freedom",
	["stalker_patch"] 		= "stalker",
	["ecolog_patch"] 		= "ecolog",
	["bandit_patch"] 		= "bandit",
	["duty_patch"] 			= "dolg",
	["monolith_patch"] 		= "monolith",
	["army_patch"] 			= "army",
	["merc_patch"] 			= "killer"
}

local message_type = {
	not_allowed = 0,
	changed = 1,
	returned = 2,
	same = 3
}

local disguise_messages = {}

function on_game_start()
	RegisterScriptCallback("actor_on_first_update",actor_on_first_update)
	RegisterScriptCallback("actor_on_update",actor_on_update)
	RegisterScriptCallback("npc_on_update",npc_on_update)
	
	RegisterScriptCallback("on_game_load",on_game_load)
	
	RegisterScriptCallback("save_state",save_state)
	RegisterScriptCallback("load_state",load_state)
end

function on_game_load()
	--printf("DBG on_game_load")
	local defaults = {
		disguise_system = {
			ds_default_faction = default_faction or character_community(db.actor):sub(7) or "stalker",
			ds_last_seen = last_seen,
			ds_suspicion = suspicion,
			ds_callout = callout,
			ds_warned = warned,
			ds_community = disguise_community
		}
	}
	load_state(defaults)
	--printf("DBG default " .. (default_faction or "?"))
end

function actor_on_first_update()
    prev_patch_in_slot = db.actor:item_in_slot(patch_slot_number)
end

function actor_on_update()
	local actor = db.actor
	
	if not actor:alive() then
		return
	end

	update_default_faction()
	disguise_by_patch()
end

function update_default_faction()
	local actor_community = utils.get_actor_community()
	local has_faction_changed_during_disguise = disguise_community ~= nil and actor_community ~= disguise_community
	local has_faction_changed = disguise_community == nil and actor_community ~= default_faction
	
	if has_faction_changed_during_disguise or has_faction_changed then
		default_faction = actor_community
	end
end

function disguise_by_patch()
	local actor_community = utils.get_actor_community()
	local patch_in_slot = db.actor:item_in_slot(patch_slot_number)
	local has_actor_in_sight = does_anybody_see or does_anybody_remember
	
	if has_patch_changed(patch_in_slot) then
		reset_disguise_messages()
	end
	
	if not patch_in_slot and is_under_disguise(actor_community) then
		if has_actor_in_sight then
			message_about_disguise(message_type.not_allowed)
		else
			local previous_community = disguise_community
			change_community(default_faction)
			message_about_disguise(message_type.returned, previous_community)
		end
	end
	
	if patch_in_slot then
		local patch_community = patch_sections[patch_in_slot:section()]
		
		if actor_community ~= patch_community then
			if has_actor_in_sight then
				message_about_disguise(message_type.not_allowed)
			else
				change_community(patch_community)
				if patch_community ~= default_faction then
					message_about_disguise(message_type.changed, patch_community)
				end
			end
		elseif not is_under_disguise(actor_community) then
			message_about_disguise(message_type.same)
		end
	end
	
	prev_patch_in_slot = patch_in_slot
end

function has_patch_changed(current_patch_in_slot)
	local has_patch_added_to_empty_slot = current_patch_in_slot == nil and prev_patch_in_slot ~= nil
	local has_patch_removed_from_slot = current_patch_in_slot ~= nil and prev_patch_in_slot == nil
	local has_patch_in_slot_replaced_by_new_patch = current_patch_in_slot ~= nil and prev_patch_in_slot ~= nil and 
		current_patch_in_slot:section() ~= prev_patch_in_slot:section()
	
	return has_patch_added_to_empty_slot or has_patch_removed_from_slot or has_patch_in_slot_replaced_by_new_patch
end

function is_under_disguise(actor_community)
	return disguise_community ~= nil and actor_community == disguise_community
end

function change_community(community)	
	if community == default_faction then
		suspicion = {}
		callout = true
		warned = true
		disguise_community = nil
	else
		suspicion = {}
		callout = false
		warned = false
		disguise_community = community
	end
	
	db.actor:set_character_community( ("actor_" .. community), 0, 0 )
end

function message_about_disguise(type, community)
	if disguise_messages[type] then
		return
	end
	
	if community == nil then
		community = ""
	end

	local text
	
	if type == message_type.not_allowed then
		text = game.translate_string("st_disguise_actor_in_sight")
	elseif type == message_type.same then
		text = game.translate_string("st_disguise_actor_in_same_faction")
	else
		if type == message_type.changed then 
			text = game.translate_string("st_disguise_faction_changed")
		elseif type == message_type.returned then
			text = game.translate_string("st_disguise_faction_returned")
		end
		
		local member_name = game.translate_string("st_disguise_faction_member_"..community)
		text = string.format(text, member_name)
	end
	
	message(text)
	disguise_messages[type] = true
end

function message_about_suspicious(npc)
	local actor = db.actor
	local actor_name = alife():actor():character_name()
	local text = "st_disguise_suspicious_"..npc:character_community().."_1"
	text = game.translate_string(text)
	local news_text = string.format(text, actor_name)
	
	actor:give_game_news(npc:character_name()..":", news_text, npc:character_icon(), 0, 10000)
	xr_sound.set_sound_play(actor:id(), "pda_tips")
end

function message(text)
	news_manager.send_tip(db.actor, text, nil, nil, 5000)
end

function play_discovered_sound(npc)
	local human_number = math.random(1,3)
	local sound_number = math.random(1,3)
	local path_to_sound = "characters_voice\\human_0".. human_number .."\\".. npc:character_community() .."\\alife\\attack\\found_enemy_".. sound_number .."_pda"
	local discovered_sound = sound_object(path_to_sound)
	
	if discovered_sound ~= nil then
		discovered_sound:play(db.actor,0,sound_object.s2d)
	end
end

function reset_disguise_messages()
	for k,v in pairs(disguise_messages) do
		disguise_messages[k] = false
	end
end

function anybody_see()
	for i=1, #db.OnlineStalkers do
		npc = level.object_by_id(db.OnlineStalkers[i])
		if (npc and IsStalker(npc,npc:clsid()) and npc:alive()) then
			if(npc:see(db.actor)) then
				return true
			end
		end
	end
	return false
end

function anybody_remember()
	local time_passed
	for k,v in pairs(last_seen) do
		if(v)then
			time_passed = game.get_game_time():diffSec(v)
			if( time_passed < time_to_forget) then
				return true
			else
				last_seen[k] = nil
			end
		end
	end
	return false
end

function npc_on_update(npc)
	does_anybody_see = anybody_see()
    does_anybody_remember = anybody_remember()

	if not default_faction or not db.actor then return end
	
	local npc_is_enemy = game_relations.is_factions_enemies(default_faction, npc:character_community()) or npc:relation(db.actor) == game_object.enemy

	local current = utils.get_actor_community()
	if current ~= default_faction and npc:see(db.actor) and npc_is_enemy then
		local id = npc:id()
		last_seen[id] = game.get_game_time()
		
		if suspicion[id] then
			local distance = npc:position():distance_to_sqr(db.actor:position())
			suspicion[id] = suspicion[id] + suspicion_increase(distance)
			
			if (suspicion[id] > suspicion_limit) then
				if not callout then
					message(game.translate_string("st_disguise_exposure_discovered"))
					play_discovered_sound(npc)
					--printf("discovered at %s",os.date("%X"))
				end
				change_community(default_faction)
				current = utils.get_actor_community()
			elseif not warned and suspicion[id] > warning_limit then
				message_about_suspicious(npc) 
				warned = true
			end
		else
			--printf("saw at %s",os.date("%X"))
			suspicion[id] = 1
		end
	else
		local id = npc:id()
		if suspicion[id] then
			suspicion[id] = suspicion[id] - 1
			if (suspicion[id] <= 0) then
				suspicion[id] = nil
			end
		end
	end

	if warned and current ~= default_faction then
		local suspicious = false
		for k,v in pairs(suspicion) do
			if v and v > dewarn_limit then
				suspicious = true
				break
			end
		end
		if not suspicious then
			message(game.translate_string("st_disguise_exposure_avoided"))
			warned = false
		end
	end
end

function suspicion_increase(distance)
	local increase = 1
	
	if(distance > discovery_distance) then
		increase = 0
	else
		local helm = db.actor:item_in_slot(12)
		local outfit = db.actor:item_in_slot(7)
		local has_helm_hides = helm and (helm:condition() > min_condition_h)
		local has_outfit_hides = outfit and (outfit:condition() > min_condition_o)
		local actor_community = utils.get_actor_community()
		
		if not has_helm_hides and has_outfit_hides then
			has_helm_hides = alun_utils.read_from_ini(nil,outfit:section(),"helmet_avaliable","bool",false)
		end
		
		if has_helm_hides then
			increase = increase - 0.25
		end
		
		if has_outfit_hides then
			local value = 0.25
			
			if is_outfit_fits(actor_community, outfit:section()) then
				value = value + 0.25
			end
		
			increase = increase - value
		end
	end
	
	--printf("DBG suspicion increased: "..increase)
	return increase
end

function is_outfit_fits(npc_community, outfit) -- where outfit is section
	local outfit_community = ""
	
	if(string.match(outfit,"specops_") or string.match(outfit,"military_")) then
		outfit_community = "army"
	elseif(string.match(outfit,"bandit_") or string.match(outfit,"trenchcoat_") or string.match(outfit,"banditmerc_")) then
		outfit_community = "bandit"
	elseif(string.match(outfit,"cs_")) then
		outfit_community = "csky"	
	elseif(string.match(outfit,"svoboda_")) then
		outfit_community = "freedom"	
	elseif(string.match(outfit,"ecolog_")) then
		outfit_community = "ecolog"	
	elseif(string.match(outfit,"dolg_")) then
		outfit_community = "dolg"
	elseif(string.match(outfit,"merc_")) then
		outfit_community = "killer"
	elseif(string.match(outfit,"stalker_") or string.match(outfit,"scientific_") or string.match(outfit,"exo_")) then
		outfit_community = "stalker"
	elseif(string.match(outfit,"monolith_")) then
		outfit_community = monolith
	end
	
	return outfit_community == npc_community
end

function save_state(data)
	--printf("DBG save_state")
	data.disguise_system = {}
	data.disguise_system.ds_default_faction = default_faction
	data.disguise_system.ds_callout = callout
	data.disguise_system.ds_warned = warned
	data.disguise_system.ds_last_seen = last_seen
	data.disguise_system.ds_suspicion = suspicion
	data.disguise_system.ds_community = disguise_community

	--printf("DBG default " .. (default_faction or "?"))
end

function load_state(data)
	--printf("DBG load_state")
	if not data.disguise_system then return end
	default_faction = data.disguise_system.ds_default_faction
	callout = data.disguise_system.ds_callout
	warned = data.disguise_system.ds_warned or callout
	disguise_community = data.disguise_system.ds_community 

	if not default_faction or default_faction == "" then
		default_faction = db.actor and character_community(db.actor):sub(7) or ""
		printf("DBG loaded default " .. (default_faction or "?"))
	end

	local last_seen_load = data.disguise_system.ds_last_seen
	last_seen = {}
	for k,v in pairs(last_seen_load) do
		if v then
			last_seen[k] = v
		end
	end

	local suspicion_load = data.disguise_system.ds_suspicion
	suspicion = {}
	for k,v in pairs(suspicion_load) do
		if v then
			suspicion[k] = v
		end
	end

	--printf("DBG default " .. (default_faction or "?"))
end
