----------------------
-- File: Disguise System
-- Author: strelocc
-- Adapted and improved for Anomaly: seargedp
-- Tweaked for CoC 1.4.22: SarisKhan
-- Reworked due to patch dressing feature: Dancher
----------------------

-- main update rate in seconds (where 1 is 1 second)
local main_update_rate = 1

--time you need to be hidden (not seen by any npc) before changing outfit to make the disguise effective, 100 means roughly 10 seconds
local time_to_forget = 100

--time you need to wait before discovery, 100 means roughly 10 seconds, 1200 = 2 minutes in realtime
local time_to_forget_discovery = 1200

--minimum condition for an outfit to work as disguise
--set to 0 to not consider outfit condition, if you want only mint condition outfits to work set to 0.99 and not 1 because condition can never be exactly 1
local min_condition_o = 0.25

--minimum condition for an helmet to reduce suspicion buildup
--set to 0 to not consider helmet condition, if you want only mint condition helmets to work set to 0.99 and not 1 because condition can never be exactly 1
local min_condition_h = 0.25

--distance within npc will start doubting the disguise (if they are seeing you)
--5 = 1 wood box width
local discovery_distance = 100

--how much time it takes to be discovered when in view, 100 is roughly 1 minute with uncovered face
local suspicion_limit = 60
local warning_limit = suspicion_limit / 3
local dewarn_limit = suspicion_limit / 3

local last_seen = {}
local suspicion = {}
local callout = false
local warned = false
local last_discovery_time = nil

local patch_slot_number = 14

local patch_in_slot
local prev_patch_in_slot

local default_faction
local actor_community
local disguise_community

local patch_factions

local function get_patch_faction(patch_section)
	if (patch_factions == nil) then
		patch_factions = {
			["csky_patch"] 			= "csky",
			["freedom_patch"] 		= "freedom",
			["stalker_patch"] 		= "stalker",
			["ecolog_patch"] 		= "ecolog",
			["bandit_patch"] 		= "bandit",
			["duty_patch"] 			= "dolg",
			["monolith_patch"] 		= "monolith",
			["army_patch"] 			= "army",
			["merc_patch"] 			= "killer"
		}
	end
	return patch_factions[patch_section]
end

local function npc_on_death_callback(victim,who)
	if (IsActor(who) and has_actor_disguised()) then
		discover()
	end
end

function on_game_start()
	RegisterScriptCallback("actor_on_first_update",actor_on_first_update)
	RegisterScriptCallback("actor_on_before_death",actor_on_before_death)
	RegisterScriptCallback("npc_on_death_callback",npc_on_death_callback)
	RegisterScriptCallback("on_game_load",on_game_load)
	RegisterScriptCallback("save_state",save_state)
	RegisterScriptCallback("load_state",load_state)
end

function on_game_load()
	--printf("DBG on_game_load")
	local defaults = {
		disguise_system = {
			ds_default_faction = default_faction or utils.get_actor_community(),
			ds_last_seen = last_seen,
			ds_suspicion = suspicion,
			ds_last_discovery_time = last_discovery_time,
			ds_callout = callout,
			ds_warned = warned,
			ds_community = disguise_community
		}
	}
	load_state(defaults)
	--printf("DBG default " .. (default_faction or "?"))
end

local function can_sleep()
	return not patch_in_slot and not has_actor_disguised() and is_empty(suspicion) and not has_actor_discovered() and not has_actor_in_sight()
end

local function run_updates()
	local is_first_update = true
	
	local main_update_ev_id = "disguise"
	local main_update_act_id = "main_update"
	
	local function main_update()
		ResetTimeEvent(main_update_ev_id, main_update_act_id, main_update_rate)
		
		patch_in_slot = get_patch_in_slot()
		
		if (can_sleep()) then
			-- printf("Disguise system is sleeping!")
			return
		end
		
		if (is_first_update) then
			prev_patch_in_slot = patch_in_slot
		end
		
		actor_community = utils.get_actor_community()

		update_actor()
		update_npc()
		update_ui(is_first_update)
		
		is_first_update = false
		prev_patch_in_slot = patch_in_slot
	end
	CreateTimeEvent(main_update_ev_id, main_update_act_id, main_update_rate, main_update)
end

local function stop_updates()
	RemoveTimeEvent("disguise","main_update")
end

function actor_on_first_update()
	run_updates()
end

function actor_on_before_death()
	stop_updates()
end

function update_actor()
	update_actor_default_faction()
	update_actor_disguise_by_patch()
end

function get_patch_in_slot()
	return db.actor:item_in_slot(patch_slot_number)
end

function update_actor_default_faction()
	if not disguise_helper.has_faction_changed(actor_community, disguise_community, default_faction) then
		return
	end
	
	default_faction = actor_community
end

function update_actor_disguise_by_patch()
	local has_actor_disguised = has_actor_disguised()
	local disguise_tip_type = disguise_news.disguise_tip_type
	local previous_community = disguise_community
	
	if disguise_helper.has_patch_changed(patch_in_slot, prev_patch_in_slot) then
		disguise_news.reset_once_disguise_tips()
	end
	
	if not patch_in_slot and has_actor_disguised then
		if has_actor_in_sight() then
			disguise_news.send_disguise_tip_once(disguise_tip_type.not_allowed)
		else
			change_actor_community(default_faction)
			actor_community = default_faction
			has_actor_disguised = false
			disguise_news.send_disguise_tip(disguise_tip_type.returned, previous_community)
		end
	end
	
	if patch_in_slot then
		local patch_community = get_patch_faction(patch_in_slot:section())
		if actor_community ~= patch_community then
			if axr_companions.has_companion() then
				disguise_news.send_disguise_tip_once(disguise_tip_type.has_companion)
			elseif has_actor_discovered() then
				disguise_news.send_disguise_tip_once(disguise_tip_type.discovered)
			elseif has_actor_in_sight() then
				disguise_news.send_disguise_tip_once(disguise_tip_type.not_allowed)
			else
				change_actor_community(patch_community)
				actor_community = patch_community
				has_actor_disguised = true
				if patch_community ~= default_faction then
					disguise_news.send_disguise_tip(disguise_tip_type.changed, patch_community)
				else
					disguise_news.send_disguise_tip(disguise_tip_type.returned, previous_community)
				end
			end
		elseif not has_actor_disguised then
			disguise_news.send_disguise_tip_once(disguise_tip_type.same)
		end
	end
end

function has_actor_disguised()
	return disguise_community ~= nil
end

function has_actor_in_sight()
	return disguise_helper.has_actor_in_sight(last_seen, time_to_forget)
end

function has_actor_discovered()
	return disguise_helper.has_actor_discovered(last_discovery_time, time_to_forget_discovery)
end

function change_actor_community(community)
	if community == default_faction then
		suspicion = {}
		callout = true
		warned = true
		disguise_community = nil
	else
		suspicion = {}
		callout = false
		warned = false
		disguise_community = community
	end
	
	db.actor:set_character_community( ("actor_" .. community), 0, 0 )
end

function update_npc()
	local actor = db.actor
	
	for i=1, #db.OnlineStalkers do
		local st = db.storage[db.OnlineStalkers[i]]
		local npc = st and st.object or level.object_by_id(db.OnlineStalkers[i])
		if (npc and IsStalkerOnly(npc)) then
			if (npc:alive()) then
				local id = npc:id()
				local npc_is_enemy = game_relations.is_factions_enemies(default_faction, npc:character_community()) or npc:relation(actor) == game_object.enemy
				local current = utils.get_actor_community()
				if current ~= default_faction and npc:see(actor) and npc_is_enemy then
					last_seen[id] = game.get_game_time()
					
					if suspicion[id] then
						local distance = npc:position():distance_to_sqr(actor:position())
						suspicion[id] = suspicion[id] + suspicion_increase(distance)
						
						if (suspicion[id] > suspicion_limit) then
							discover()
							current = default_faction
						elseif not warned and suspicion[id] > warning_limit then
							disguise_news.send_suspicious_tip(npc) 
							warned = true
						end
					else
						--printf("saw at %s",os.date("%X"))
						suspicion[id] = 1
					end
				else
					if suspicion[id] then
						suspicion[id] = suspicion[id] - 1
						if (suspicion[id] <= 0) then
							suspicion[id] = nil
						end
					end
				end
				
				if warned and current ~= default_faction then
					local suspicious = false
					for k,v in pairs(suspicion) do
						if v and v > dewarn_limit then
							suspicious = true
							break
						end
					end
					if not suspicious then
						disguise_news.send_tip(game.translate_string("st_disguise_exposure_avoided"))
						warned = false
					end
				end
			else
				local id = npc:id()
				last_seen[id] = nil
				suspicion[id] = nil
			end
		end
	end
end

function update_ui(is_first_update)	
	if (is_first_update or disguise_helper.has_patch_changed(patch_in_slot, prev_patch_in_slot)) then
		slot_hud.set_patch_slot(patch_in_slot)
	end
end

function suspicion_increase(distance)
	local increase = 1
	
	if(distance > discovery_distance) then
		increase = 0
	else
		local actor = db.actor
		local helm = actor:item_in_slot(12)
		local outfit = actor:item_in_slot(7)
		local has_helm_hides = helm and (helm:condition() > min_condition_h)
		local has_outfit_hides = outfit and (outfit:condition() > min_condition_o)
		
		if not has_helm_hides and has_outfit_hides then
			has_helm_hides = alun_utils.read_from_ini(nil,outfit:section(),"helmet_avaliable","bool",false)
		end
		
		if has_helm_hides then
			increase = increase - 0.25
		end
		
		if has_outfit_hides then
			increase = increase - 0.25
			
			local actor_community = utils.get_actor_community()
			
			if disguise_helper.is_outfit_fits_community(actor_community, outfit:section()) then
				increase = increase - 0.25
			end
		end
	end
	
	--printf("DBG suspicion increased: "..increase)
	return increase
end

function discover()
	if not callout then
		disguise_news.send_tip(game.translate_string("st_disguise_exposure_discovered"))
		--printf("discovered at %s",os.date("%X"))
	end
	change_actor_community(default_faction)
	last_discovery_time = game.get_game_time()
	disguise_news.reset_once_disguise_tips()
end

function save_state(data)
	--printf("DBG save_state")
	data.disguise_system = {}
	data.disguise_system.ds_default_faction = default_faction
	data.disguise_system.ds_callout = callout
	data.disguise_system.ds_warned = warned
	data.disguise_system.ds_last_seen = last_seen
	data.disguise_system.ds_suspicion = suspicion
	data.disguise_system.ds_last_discovery_time = last_discovery_time
	data.disguise_system.ds_community = disguise_community

	--printf("DBG default " .. (default_faction or "?"))
end

function load_state(data)
	--printf("DBG load_state")
	if not data.disguise_system then return end
	default_faction = data.disguise_system.ds_default_faction
	callout = data.disguise_system.ds_callout
	warned = data.disguise_system.ds_warned or callout
	last_discovery_time = data.disguise_system.ds_last_discovery_time
	disguise_community = data.disguise_system.ds_community 

	if not default_faction or default_faction == STR_EMPTY then
		local actor = db.actor
		default_faction = actor and utils.get_actor_community() or STR_EMPTY
		printf("DBG loaded default " .. (default_faction or "?"))
	end

	local last_seen_load = data.disguise_system.ds_last_seen
	last_seen = {}
	for k,v in pairs(last_seen_load) do
		if v then
			last_seen[k] = v
		end
	end

	local suspicion_load = data.disguise_system.ds_suspicion
	suspicion = {}
	for k,v in pairs(suspicion_load) do
		if v then
			suspicion[k] = v
		end
	end

	--printf("DBG default " .. (default_faction or "?"))
end

function get_actor_default_faction()
	return "actor_"..default_faction
end
