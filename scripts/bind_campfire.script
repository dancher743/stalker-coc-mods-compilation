--'******************************************************
--'*	Биндер объекта костра .
--'******************************************************
-- name your campfires in SDK <smart_name>_campfire_<number> if you want them to be lit by NPCs

campfires_all = {}

-- Matches sound from NLC 7: Build 3.0
local matches_sound = sound_object([[nlc\matches_1_short]])

local wind_sounds_channels = {
	restored_rnd_wind		= true,
	darkwind_1				= true,
    forest_rnd_wind			= true,
    marsh_rnd_wind			= true
}

local playing_wind_sounds = {}

local function is_windy()
	local result = false

	for snd_path,snd_obj in pairs(playing_wind_sounds) do
		if (snd_obj:playing()) then
			result = true
			break
		end
	end
	
	return result
end

-- For use with Marshal save state system
local function save_state(m_data)
	--alun_utils.debug_write("bind_campfire:save_state")
	empty_table(m_data.campfire_states)
	for smart,t in pairs(db.campfire_table_by_smart_names) do 
		for id,binder in pairs(t) do 
			if (binder and binder.campfire) then
				if (binder.campfire:is_on()) then 
					if not (m_data.campfire_states) then 
						m_data.campfire_states = {}
					end
					m_data.campfire_states[id] = true
				end
			end
		end
	end
end 

-- called from game_tutorials.xml
function use_campfire(actor,zone,p)
	if actor == nil then
		actor = db.actor
	end

	local campfire, campfire_pos = get_nearest_campfire(actor)
	
	if campfire ~= nil then
		if (campfire:is_on()) then 
			campfire:turn_off()
		else
			local chance_to_ignite
			
			local rain_factor = level.rain_factor()
			if (rain_factor > 0) then
				chance_to_ignite = utils.lerp(70, 30, rain_factor)
			elseif (is_windy()) then
				chance_to_ignite = 50
			else
				chance_to_ignite = 90
			end
			
			if math.random(100) < chance_to_ignite then
				campfire:turn_on()
			end
			
			if matches_sound:playing() then
				matches_sound:stop()
			end
			matches_sound:play_at_pos(actor, campfire_pos)
		end
	end
end

function get_nearest_campfire(npc, range)
	local pos = npc:position()
	
	if range == nil then
		range = 2
	end
	
	for id,binder in pairs(campfires_all) do 
		if (binder and binder.campfire) then
			local campfire_position = binder.object:position()
			if (pos:distance_to_sqr(campfire_position) <= range) then
				return binder.campfire, campfire_position
			end
		end 
	end

	return nil
end

local function sound_on_ambient_playing(snd_obj, snd_path, snd_channel_name, snd_volume, snd_dist)
	if (wind_sounds_channels[snd_channel_name] and snd_dist <= 40 and snd_volume > 0.3) then
		playing_wind_sounds[snd_path] = snd_obj
	end
end

function on_game_start()
	local tutorial_ran = 0 -- because we don't want to conflict with other tutorials, we need to identify if we are running (ie. > 0)
	local function main_loop()
		
		if not (db.actor) then 
			return false
		end
		
		if (db.actor:active_item()) then
			if (tutorial_ran > 0) then
				tutorial_ran = 0
				if (game.has_active_tutorial()) then
					game.stop_tutorial()
				end
			end
			return false 
		end
		
		local pos = db.actor:position()
		for id,binder in pairs(campfires_all) do
			if (binder and binder.campfire) then
				if (pos:distance_to_sqr(binder.object:position()) <= 2) then
					if not (game.has_active_tutorial()) then
						tutorial_ran = id
						if (binder.campfire:is_on()) then
							game.start_tutorial("tutorial_campfire_extinguish")
						else 
							game.start_tutorial("tutorial_campfire_ignite")
						end
					end
				elseif (tutorial_ran == id) then
					tutorial_ran = 0
					if (game.has_active_tutorial()) then
						game.stop_tutorial()
					end
				end
			end 
		end
		
		return false
	end

	AddUniqueCall(main_loop)
	RegisterScriptCallback("sound_on_ambient_playing",sound_on_ambient_playing)
end 



-------------------------------------------------------------------
-------------------------------------------------------------------
function bind(obj)
	obj:bind_object(campfire_binder(obj))
end
-------------------------------------------------------------------
-------------------------------------------------------------------

class "campfire_binder" (object_binder)
function campfire_binder:__init(obj) super(obj)
	self.campfire = obj:get_campfire()
	if (USE_MARSHAL) then 
		RegisterScriptCallback("save_state",save_state)
	end
end

function campfire_binder:reload(section)
	object_binder.reload(self, section)
end

function campfire_binder:reinit()
	object_binder.reinit(self)
end

function campfire_binder:net_spawn(server_object)
	if not object_binder.net_spawn(self, server_object) then
		return false
	end
	
	campfires_all[self.object:id()] = self

	local id = self.object:id()
	local m_data = alife_storage_manager.get_state()
	if (m_data and m_data.campfire_states and m_data.campfire_states[id]) then 
		-- do not turn off campfire on game load
		m_data.campfire_states[id] = nil
	else
		if (self.campfire and self.campfire:is_on()) then
			self.campfire:turn_off()
		end
	end
	
	local smart_name = string.gsub(self.object:name(), "_campfire_%d*", "")
	if SIMBOARD.smarts_by_names[smart_name] then
		if db.campfire_table_by_smart_names[smart_name] == nil then
			db.campfire_table_by_smart_names[smart_name] = {}
		end
		db.campfire_table_by_smart_names[smart_name][id] = self
	end
	return true
end

function campfire_binder:net_destroy(server_object)
	local smart_name = string.gsub(self.object:name(), "_campfire_%d*", "")
	if SIMBOARD.smarts_by_names[smart_name] then
		if (db.campfire_table_by_smart_names[smart_name]) then 
			db.campfire_table_by_smart_names[smart_name][self.object:id()] = nil
		end
	end

	campfires_all[self.object:id()] = nil
	object_binder.net_destroy(self)
end 

function turn_off_campfires_by_smart_name(smart_name,turn_off_chance)
	local smart_campfires = db.campfire_table_by_smart_names[smart_name]
	if smart_campfires ~= nil and not is_empty(smart_campfires) then
		if turn_off_chance == nil then
			turn_off_chance = 20
		end
		for k,v in pairs (smart_campfires) do
			if (math.random(100) < turn_off_chance) then
				-- shouldn't be needed with Open Xray because of DX11 lighting fix
				--if (v.object) then
				--	if (render_get_dx_level() == 655361) then 
				--		v.object:disable_anomaly()
				--	end
				--end
				if (v.campfire and v.campfire:is_on()) then
					v.campfire:turn_off()
				end
			end
		end
	end
end
