local item_by_community = {}
local item_count = {}
local always_keep_item = {}
local item_by_story_id
local death_ini = ini_file("misc\\death_generic.ltx")

--Wafel start
function Wafel_func_drop()  
	local drop_config={
		["zero"]={0,0,0,0},
		["novice"]={45,60,2,6}, --wpn_cond_min,wpn_cond_max,ammo_multiple_min, ammo_multiple_max
		["trainee"]={60,70,3,7},
		["experienced"]={70,80,4,8},
		["professional"]={80,90,5,9},
		["veteran"]={80,90,6,10},
		["expert"]={85,90,7,11},
		["master"]={90,95,8,12},
		["legend"]={95,100,9,13},    
	}	
	
	local aliases={'zero','novice','trainee','experienced','professional','veteran','expert','master','legend'}
	
	return function (rank,mode,npc)
		math.randomseed( os.time() )
		local result
		local  function find_pos(where,what)
			local pos=1
			for k,v in pairs(where) do
			  if (string.find(v,''..what)~=nil) then
				pos=k
				break
			  end
			end			
			return pos
		end
		local temp_pos=find_pos(aliases,''..rank)		
		if(temp_pos>1 and math.random(1,100)<math.floor(64/temp_pos))then	
			temp_pos=math.random(temp_pos-2,temp_pos+2)
			if		(temp_pos<2) then temp_pos=2
			elseif	(temp_pos>9) then temp_pos=9 end			
		end
		local temp_rank=aliases[temp_pos]
		
		
		if(mode == "wpn") then 
			local temp_min_cond=drop_config[temp_rank][1]
			local temp_max_cond=drop_config[temp_rank][2]			
			result=math.random(temp_min_cond,temp_max_cond)
			--printf("Wafel checks: myfunc: ret wpn cond: "..result)
			
			---
			-- Additional chances to change weapon's condition:
			-- 75% chance to decrease weapon's condition on 20%,
			-- if npc is zombied, his weapon's condition additionally will be divide by 2,
			-- 20% chance to set weapon's condition to 50% for any stalker (including zombied),
			-- 10% chance to set weapon's condition to 100% for any stalker (including zombied).
			-- Added by Dancher.
			--
			local chance = math.random(100)
			
			if (chance <= 75) then
				result = result - (result * 0.2)
			end
			
			if npc:character_community() == "zombied" then
				result = result / 2
			end
			
			if (chance <= 20) then
				result = 50
			end
			
			if (chance <= 10) then
				result = 100
			end
			---
			
			return result/100      
		elseif(mode=="ammo") then
			local temp_min_ammo=drop_config[temp_rank][3]
			local temp_max_ammo=drop_config[temp_rank][4]
			result=math.random(temp_min_ammo,temp_max_ammo)
			--printf("Wafel checks: myfunc: ret ammo multiple: "..result)
			return result		
		end		    
	end
end
--Wafel end

function init_drop_settings()
	-- Create a list by community of the percent chance to spawn an item
	local community_list = { "stalker", "dolg", "freedom", "bandit", "army", "zombied", "ecolog", "killer", "monolith", "csky" }
	for k,v in pairs(community_list) do
		item_by_community[v] = {}
		if death_ini:section_exist(v) then
			local n = death_ini:line_count(v)
			local id, value = STR_EMPTY, STR_EMPTY
			for i=0,n-1 do
				result, id, value	= death_ini:r_line_ex(v,i,STR_EMPTY,STR_EMPTY)
				item_by_community[v][id] = tonumber(value) or 0
			end
		end
	end

	local n = death_ini:line_count("item_count")
	local id, value = STR_EMPTY, STR_EMPTY
	for i=0,n-1 do
		local result, id, value	= death_ini:r_line_ex("item_count",i,STR_EMPTY,STR_EMPTY)
		local p = alun_utils.str_explode(value,STR_COMMA)
		if (p) then
			p[1] = tonumber(p[1]) or 0
			p[2] = tonumber(p[2]) or p[1]
			item_count[id] = {p[1],p[2]}
		end
	end
	
 	-- Create a list of item sections that npc must keep
	local n = death_ini:line_count("keep_items")
	for i=0,n-1 do
		local result, id, value	= death_ini:r_line_ex("keep_items",i,STR_EMPTY,STR_EMPTY)
		if value == STR_TRUE then
			always_keep_item[id] = true
		end
	end
	
	-- Create a list of item sections that npc must keep
	local n = death_ini:line_count("spawn_by_story_id")
	for i=0,n-1 do
		if not (item_by_story_id) then 
			item_by_story_id = {}
		end
		local result, id, value	= death_ini:r_line_ex("spawn_by_story_id",i,STR_EMPTY,STR_EMPTY)
		item_by_story_id[id] = value
	end
end

-- this will actually occur every time corpse spawn unless already looted
function decide_items_to_keep(npc)
	local death_dropped = utils.se_obj_load_var(npc:id(),npc:name(),"death_dropped")
	if (death_dropped) then
		return
	end
	npc:iterate_inventory(keep_item, npc)
end

function create_release_item(npc)
	local death_dropped = utils.se_obj_load_var(npc:id(),npc:name(),"death_dropped")
	if (death_dropped) then
		return
	end
	utils.se_obj_save_var(npc:id(),npc:name(),"death_dropped",true)
	
	-- spawn items by story id
	local sid = item_by_story_id and get_object_story_id(npc:id())
	if (sid and item_by_story_id[sid]) then
		local p = xr_logic.pick_section_from_condlist(db.actor,npc,alun_utils.parse_condlist(item_by_story_id[sid]))
		--local p = alun_utils.str_explode(item_by_story_id[sid],STR_COMMA)
		--printf("sid=%s p=%s",sid,p)
		if (p and p ~= STR_EMPTY and p ~= STR_NIL) then
			create_items(npc, p, 1, 100)
		end
	end

	local ini = npc:spawn_ini()
	if ini and ini:section_exist("dont_spawn_loot") then
		return
	end
	
	local st = db.storage[npc:id()]
	if (st and st.ini and st.section_logic and st.ini:line_exist(st.section_logic,"dont_spawn_loot")) then 
		return
	end

	local spawn_items = item_by_community[character_community(npc)]
	if spawn_items == nil then
		return
	end
	
	try_spawn_ammo(npc,spawn_items)
	
	try_spawn_patch_for_zombied(npc,spawn_items)
	
	local grenade_classes = { 
								["ammo_m209"] = true,
								["ammo_vog-25"] = true,
								["ammo_og-7b"] = true
							}
	for sec,v in pairs(spawn_items) do
		if (v > 0 and item_count[sec] and not utils.is_ammo(sec) and not grenade_classes[sec] and sec ~= "zombied_patch") then
			local number = math.random(item_count[sec][1], item_count[sec][2])
			create_items(npc, sec, number, v)
		end
	end
end

function try_spawn_ammo(npc,spawn_items)
	local ini = get_system_ini()
	local class,ammo_class,sec,number
	local function itr(npc,itm)
		if (IsWeapon(nil,itm:clsid()) and not npc:marked_dropped(itm)) then
			class = get_system_ini():r_string_ex(itm:section(),"class")
			ammo_class = alun_utils.parse_list(ini,itm:section(),"ammo_class")
			if (class and class == "WP_KNIFE") then return end
			-- randomly spawn only 1 ammo type per found weapon
			if (#ammo_class > 0) then
				sec = ammo_class[math.random(1,#ammo_class)]
				if (sec) then 
					if (item_count[sec]) then
						number = math.random(item_count[sec][1], item_count[sec][2])
					else 
						number = math.random(1,15)
					end
					if (number > 0 and get_system_ini():section_exist(sec)) then
						create_ammo(sec,npc:position(),npc:level_vertex_id(),npc:game_vertex_id(),npc:id(),number)
					end
				end
			end
			-- spawn grenade ammo if there is launcher attached
			if (ini:r_float_ex(itm:section(),"grenade_launcher_status") > 0) then
				ammo_class = alun_utils.parse_list(ini,itm:section(),"grenade_class")
				for i=1,#ammo_class do
					sec = ammo_class[i]
					if (sec) then
						if (item_count[sec]) then
							number = math.random(item_count[sec][1], item_count[sec][2])
						else 
							number = math.random(0,2)
						end
						if (number > 0 and get_system_ini():section_exist(sec)) then 
							create_ammo(sec,npc:position(),npc:level_vertex_id(),npc:game_vertex_id(),npc:id(),number)
						end
					end
				end
			end
		end
	end
	npc:iterate_inventory(itr,npc)
end

function try_spawn_patch_for_zombied(npc,spawn_items)
	if npc:character_community() ~= "zombied" then
		return
	end
	
	local visual = npc:get_visual_name()
	local visual_exploded = alun_utils.str_explode(visual,"\\")
	visual = visual_exploded[3]
	
	local section = death_ini:r_string_ex("zombied_patches",visual)
	
	if (section == nil or section == STR_EMPTY) then
		printf("! death_manager: patch section not found for '%s' visual", visual)
		return
	end
	
	local count = math.random(item_count[section][1], item_count[section][2])
	local probability = spawn_items["zombied_patch"]
	
	create_items(npc, section, count, probability)
end

--' Функция вызывается для каждого предмета, если вернет false то предмет удалится.
function keep_item(npc, item)
	if not (item) then 
		return 
	end 
	
	local section = item:section()
	if (always_keep_item[section]) then 
		return 
	end 
	
	local se_item = alife_object(item:id())
	if not (se_item) then 
		return
	end
	
	local ini = npc:spawn_ini()
	if ini and ini:section_exist("dont_keep_items") then
		alife():release(se_item, true)
		return
	end
	
	local st = db.storage[npc:id()]
	if (st and st.ini and st.section_logic and st.ini:line_exist(st.section_logic,"dont_keep_items")) then
		alife():release(se_item, true)
		return
	end 
	
	-- release all animation objects
	if (section == "bolt" or section == "medkit_script" or section == "guitar_a" or section == "harmonica_a" or section == "wpn_binoc" or section == "anim_binoc" or section == "anim_knife" 
		or section == "device_torch" or section == "device_pda" or section == "hand_radio" or section == "hand_radio_r" or section == "stick_bred" or section == "stick_kolbasa" or
		section == "stick_kolbasa_bred") then
		alife():release(se_item, true)
		return 
	end
	
	local m = item:get_max_uses()
	if (m > 0) then 
		local r = math.random(0,m)
		item:set_remaining_uses(r)
		if (r == 0) then 
			alife():release(se_item, true)
		end
		return
	end
	
	if IsArtefact(item) then
		return
	end

	local cls = item:clsid()
	if IsWeapon(item,cls) and not(cls==clsid.wpn_grenade_rgd5_s or cls==clsid.wpn_grenade_f1_s) then
		set_weapon_drop_condition(npc,item)
		return
	end
	
	if (item:is_ammo() ~= true and xr_corpse_detection.lootable_table and xr_corpse_detection.lootable_table[section] and math.random(1,100) < 65) then
		return
	end
	
	alife():release(se_item, true)
end

function set_weapon_drop_condition(npc,itm)	
	--Wafel start			 	
	local rank = ranks.get_obj_rank_name(npc)	
	local rank_dep_drop_W=Wafel_func_drop()  
	local condition  = rank_dep_drop_W(rank,'wpn',npc)	
	--Wafel end	
	--local condition  = (math.random(40)+5)/100--commented by Wafel
	--printf("condition [%s]", tostring(condition))
	itm:set_condition(condition)
	
	if (IsWeapon(nil,itm:clsid()) and not npc:marked_dropped(itm)) then
		local ini = get_system_ini()
		local sec,number
		local ammo_class = alun_utils.parse_list(ini,itm:section(),"ammo_class")
		-- randomly spawn only 1 ammo type per found weapon
		if (#ammo_class > 0) then
			sec = ammo_class[math.random(1,#ammo_class)]
			if (sec and item_count[sec]) then 
				number = math.random(item_count[sec][1], item_count[sec][2])
				if (number > 0 and get_system_ini():section_exist(sec)) then
					create_ammo(sec,npc:position(),npc:level_vertex_id(),npc:game_vertex_id(),npc:id(),number)
				end
			end
		end
		-- spawn grenade ammo if there is launcher attached
		if (ini:r_float_ex(itm:section(),"grenade_launcher_status") > 0) then
			ammo_class = alun_utils.parse_list(ini,itm:section(),"grenade_class")
			for i=1,#ammo_class do
				sec = ammo_class[i]
				if (sec and item_count[sec]) then 
					number = math.random(item_count[sec][1], item_count[sec][2])
					if (number > 0 and get_system_ini():section_exist(sec)) then 
						create_ammo(sec,npc:position(),npc:level_vertex_id(),npc:game_vertex_id(),npc:id(),number)
					end
				end
			end
		end
	end
end

--' Функция спавнит необходимое число предметов
function create_items(npc, section, number, rnd)
	if not (get_system_ini():section_exist(section)) then 
		--printf("death_manager: ERROR: trying to spawn section that doesn't exist! %s",section)
		return 
	end 
	
	--printf("death_dropped: create %s=%s",section,number)
	if (utils.is_ammo(section))then
		if number > 0 then
			create_ammo(section,npc:position(),npc:level_vertex_id(),npc:game_vertex_id(),npc:id(),number)
		end
	else
		for i=1,number do
			--' Проверяем вероятность появить каждый объект в отдельности
			if (math.random(1,100)/100) <=  rnd then
				alife():create(section,npc:position(),npc:level_vertex_id(),npc:game_vertex_id(),npc:id())
			end
		end
	end
end
