--
-- Companion Trust System
-- Added by Dancher
--

local database = {}
local obj_ids_cache = {}

local trust_time_threshold = 15 -- minutes
local last_game_minute

function is_companion_trust_obj(id)
	local se_id = obj_ids_cache[id]
	
	if (not se_id) then
		local se_obj = alife_object(id)
		se_id = se_obj.id
		obj_ids_cache[id] = se_id
	end
	
	is_companion_trust(se_id)
end

function is_companion_trust(se_id)
	local is_trust = false
	
	local companion_data = database[se_id]
	if (companion_data) then
		is_trust = companion_data["trust"] or false
	end
	
	-- printf(strformat(">>> Dancher: Companion trust time: %s - %s min.", se_id, time))
	
	return is_trust
end

function force_companion_trust(se_id)
	local companion_data = database[se_id] or {}
	companion_data["trust"] = true
end

local function update_companions()
	local slist = axr_companions.list_actor_squad_with_se_obj()
	
	for i=1, #slist do
		local se_obj = slist[i]
		local companion_data = database[se_obj.id] or {}
		
		local time = companion_data["time"] or 0
		time = time + 1
		companion_data["time"] = time
		
		if (time > trust_time_threshold) then
			companion_data["trust"] = true
		end
		
		-- printf(strformat(">>> Dancher: axr_companions_trust -> ID: %s, %s - %s min.", se_obj.id, se_obj:name(), time))
	end
end

local function save_state(data)
	if (not data.companion_trust) then
		data.companion_trust = {}
	end
	
	data.companion_trust.database = database
end

local function load_state(data)
	database = data.companion_trust and data.companion_trust.database or {}
end

local function actor_on_slicing_update()
	local current_game_minute  = level.get_time_minutes()
	
	if (current_game_minute == last_game_minute) then
		return
	end
	
	update_companions()
	
	last_game_minute = current_game_minute
end

function on_game_start()
    RegisterScriptCallback("actor_on_slicing_update", actor_on_slicing_update)
	RegisterScriptCallback("save_state",save_state)
	RegisterScriptCallback("load_state",load_state)
end
