--
--	Cooking Manager
--	Allows actor to cook some items
--	Added by Dancher
--	Special thanks to Team Epic
--

local cooking_sound

local function play_cooking_sound()
	if not cooking_sound then
		cooking_sound = sound_object([[interface\inv_cooking]])
	end
	if cooking_sound:playing() then
		cooking_sound:stop()
	end
	cooking_sound:play(db.actor,0,sound_object.s2d)
end

function can_cook(item)
	if has_burning_campfire_nearby() then
		return game.translate_string("st_try_to_cook")
	end
end

function can_cook_all(item)
	if has_burning_campfire_nearby() and get_object_count(item:section(), db.actor) > 1 then
		return game.translate_string("st_try_to_cook_all")
	end
end

function cook(item)
	if (not check_recipe(item)) then
		return
	end
	
	cook_raw_item(item)
	play_cooking_sound()
end

function cook_all(item)
	if (not check_recipe(item)) then
		return
	end
	
	local items = {}
	
	local function iterator(actor, inventory_item)
		if inventory_item:section() == item:section() then
			table.insert(items, inventory_item)
		end
	end
	
	-- iterate all items in the actor's inventory
	db.actor:iterate_inventory(iterator, nil)
	
	for i,v in ipairs(items) do
		cook_raw_item(v)
	end
	
	play_cooking_sound()
end

function has_burning_campfire_nearby()
	local range = 4
	local campfire = bind_campfire.get_nearest_campfire(db.actor, range)
	return campfire ~= nil and campfire:is_on()
end

function check_recipe(item)
	local recipe_section = get_system_ini():r_string_ex(item:section(),"recipe_section") or STR_NIL
	local has_recipe = cooking_recipes_manager.has_actor_recipe(recipe_section)
	
	if (has_recipe) then
		SetHudMsg(STR_EMPTY,0)
	else
		SetHudMsg(strtransl("ui_st_cooking_recipes_absent_hudmsg"),5)
		get_cached_hud():HideActorMenu()
	end
	
	return has_recipe
end

function cook_raw_item(item)
	local sim = alife()
	local actor = db.actor

	-- create cooked item
	local cooked_section = get_system_ini():r_string_ex(item:section(),"cooked_section")
	if cooked_section == nil then
		return
	end
	sim:create(cooked_section,actor:position(),actor:level_vertex_id(),actor:game_vertex_id(),actor:id())
	
	-- release row item
	local se_obj = sim:object(item:id())
	if (se_obj) then 
		sim:release(se_obj)
	end
end
