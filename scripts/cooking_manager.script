--
--	Cooking manager
--	Allows actor to cook some items
--	by Dancher
--	Special thanks to Team Epic
--

local cooking_sound = sound_object([[interface\inv_cooking]])

function can_cook(item)
	if has_burning_campfire_nearby() then
		return game.translate_string("st_try_to_cook")
	end
end

function can_cook_all(item)
	if has_burning_campfire_nearby() and get_object_count(item:section(), db.actor) > 1 then
		return game.translate_string("st_try_to_cook_all")
	end
end

function cook(item)
	local sim = alife()
	local actor = db.actor
	
	-- create "cooked" item
	local cooked_section = system_ini():r_string_ex(item:section(),"cooked_section")
	if cooked_section == nil then
		return
	end
	sim:create(cooked_section,actor:position(),actor:level_vertex_id(),actor:game_vertex_id(),actor:id())
	
	-- release row item
	local se_obj = sim:object(item:id())
	if (se_obj) then 
		sim:release(se_obj)
	end
	
	-- play cooking sound
	if cooking_sound:playing() then
		cooking_sound:stop()
	end
	
	cooking_sound:play(db.actor,0,sound_object.s2d)
end

function cook_all(item)
	local sim = alife()
	local actor = db.actor
	
	local items = {}

	local function iterator(npc, inventory_item)
		if inventory_item:section() == item:section() then
			table.insert(items, inventory_item)
		end
	end
	
	-- iterate all items in the actor's inventory
	actor:iterate_inventory(iterator, nil)
	
	for i,v in ipairs(items) do
		-- create "cooked" item
		local cooked_section = system_ini():r_string_ex(v:section(),"cooked_section")
		if cooked_section == nil then
			return
		end
		sim:create(cooked_section,actor:position(),actor:level_vertex_id(),actor:game_vertex_id(),actor:id())
		
		-- release row item
		local se_obj = sim:object(v:id())
		if (se_obj) then 
			sim:release(se_obj)
		end
	end
	
	-- play cooking sound
	if cooking_sound:playing() then
		cooking_sound:stop()
	end
	
	cooking_sound:play(db.actor,0,sound_object.s2d)
end

function has_burning_campfire_nearby()
	local range = 4
	local campfire = bind_campfire.get_nearest_campfire(db.actor, range)
	return campfire ~= nil and campfire:is_on()
end
