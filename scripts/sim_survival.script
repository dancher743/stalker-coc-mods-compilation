local enable_debug = false

local zombie_mutants = {
    "simulation_zombie",
    "simulation_fracture",
    "simulation_snork"
}

local function print_dbg(fmt, ...)
	if enable_debug then
		printf("DANCHER: sim_survival.script | " .. fmt, ...)
	end
end

local function get_hours_elapsed()
	local start_time = level.get_start_time()
	local seconds = tonumber(game.get_game_time():diffSec(start_time))
	local hours = math.floor(seconds/60/60)
	return hours
end

local function get_chance_by_elapsed_hours(max_hours, max_chance)
	local hours_elapses = get_hours_elapsed()
	local chance_factor = utils.inverse_lerp(0, max_hours, hours_elapses)
	local chance = utils.lerp(0 , max_chance, chance_factor)
	print_dbg("get_chance_by_elapsed_hours! Factor: %s, chance: %s", chance_factor, chance)
	return chance
end

function should_faction_replace_by_zombied(faction)
	local result = false

	if (IsSurvivalMode()) then
		local chance = get_chance_by_elapsed_hours(24, 90)
		if (faction ~= "zombied" and math.random(100) <= chance) then
			print_dbg("FACTION: %s -> %s", faction, "zombied")
			result = true
		end
	end

	return result
end

function should_dont_create_squad(faction)
	local result = false

	if (IsSurvivalMode()) then
		if (faction ~= "zombied" and math.random(100) > 10) then
			result = true
		end
	end

	return result
end


function try_replace_mutant_by_zombies(section)
	local result = false
	local zombie_section = nil

	if (IsSurvivalMode()) then
		local chance = get_chance_by_elapsed_hours(12, 40)
		if (math.random(100) <= chance and not (utils.contains(zombie_mutants,section))) then
			zombie_section = zombie_mutants[math.random(#zombie_mutants)]
			print_dbg("MUTANT: %s -> %s", section, zombie_section)
			result = true
		end
	end

	return result, zombie_section
end
