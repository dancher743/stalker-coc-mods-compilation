--
--	Function-helpers for a simulation of EOC's survival mode
--	Added by Dancher
--

local max_delay_hours = 24
local max_spawn_chance = 90

local enable_debug = false

-- From Anomaly 1.5.1.2 mod
local function print_dbg(fmt, ...)
	if enable_debug then
		printf("DANCHER | sim_survival.script : " .. fmt, ...)
	end
end

local function get_chance_by_elapsed_hours()
	local hours_elapses = utils.get_hours_elapsed()
	local chance_factor = utils.inverse_lerp(0, max_delay_hours, hours_elapses)
	local chance = utils.lerp(0 , max_spawn_chance, chance_factor)
	print_dbg("get_chance_by_elapsed_hours! Factor: %s, chance: %s", chance_factor, chance)
	return chance
end

function try_replace_stalker(faction)
	local result_faction = nil

	if (faction ~= "zombied") then
		local chance = math.random(100)
		if (chance < get_chance_by_elapsed_hours()) then
			result_faction = "zombied"
			print_dbg("FACTION: %s -> %s", faction, result_faction)
		elseif (chance > max_spawn_chance) then
			result_faction = faction
		end
	end

	return result_faction
end

function try_replace_mutant(section)
	local result_section = nil
	local survival_mutants = sim_tables.mutants_for_survival_mode
	
	if (not (utils.contains(survival_mutants, section))) then
		local chance = math.random(100)
		if (chance < get_chance_by_elapsed_hours()) then
			result_section = survival_mutants[math.random(#survival_mutants)]
			print_dbg("MUTANT: %s -> %s", section, result_section)
		elseif (chance > max_spawn_chance) then
			result_section = section
		end
	end

	return result_section
end

function contains_faction_prop(prop_name, prop_count)
	return sim_tables.factions_to_zombied_props[prop_name] and prop_count > 0
end

function are_factions_zombied_or_monster(faction1, faction2)
	local is_faction1_zombied_or_monster = faction1 == "zombied" or faction1 == "monster"
	local is_faction2_zombied_or_monster = faction2 == "zombied" or faction2 == "monster"
	
	return is_faction1_zombied_or_monster == is_faction2_zombied_or_monster
end
