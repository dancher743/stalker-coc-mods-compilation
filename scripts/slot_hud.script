--//  Shows belted artifacts on primary hud

local HUD
local belted_arts, sloted_patch
local update_rate = 1000 --[ms]

function activate_hud()
	belted_arts = {}
	RegisterScriptCallback("actor_item_to_belt",actor_item_to_belt)
	RegisterScriptCallback("actor_item_to_ruck",actor_item_to_ruck)
	RegisterScriptCallback("actor_on_item_drop",actor_on_item_drop)
	RegisterScriptCallback("actor_on_weapon_zoom_in",actor_on_weapon_zoom_in)
	RegisterScriptCallback("actor_on_weapon_zoom_out",actor_on_weapon_zoom_out)
	RegisterScriptCallback("actor_on_net_destroy",actor_on_net_destroy)
	open_hud()
	db.actor:inventory_for_each(
		function (item)
			if IsArtefact(item) and db.actor:is_on_belt(item) then
				belted_arts[item:id()] = item:section()
			end
		end
	)		
	sloted_patch = db.actor:item_in_slot(14)
	HUD:update_hud()
end

function deactivate_hud()
	belted_arts = nil
	sloted_patch = nil
	close_hud()
	UnregisterScriptCallback("actor_item_to_belt",actor_item_to_belt)
	UnregisterScriptCallback("actor_item_to_ruck", actor_item_to_ruck)
	UnregisterScriptCallback("actor_on_item_drop",actor_on_item_drop)
	UnregisterScriptCallback("actor_on_weapon_zoom_in",actor_on_weapon_zoom_in)
	UnregisterScriptCallback("actor_on_weapon_zoom_out",actor_on_weapon_zoom_out)
	UnregisterScriptCallback("actor_on_net_destroy",actor_on_net_destroy)
end

function open_hud()
	if HUD == nil then
		HUD = slot_hud()
		get_cached_hud():AddDialogToRender(HUD)
	end
end

function close_hud()
	if HUD ~= nil then
		get_cached_hud():RemoveDialogToRender(HUD)
		HUD:Clear()
		HUD = nil
	end
end

function set_patch_slot(item)
	sloted_patch = item
	if HUD ~= nil then
		HUD:update_hud()
	end
end

function actor_on_net_destroy()
	close_hud()
end

function on_game_start()
	if (axr_main.config:r_value(MM_OPTIONS,"enable_slot_hud",1,false) == false) then return end
	local function actor_on_first_update()
		activate_hud()
	end
	RegisterScriptCallback("actor_on_first_update",actor_on_first_update)
end

function actor_on_item_drop(item)
	if not IsArtefact(item) then
		return
	end
	local art_id = item:id()
	if belted_arts[art_id] then 
		belted_arts[art_id] = nil
	end
	HUD:update_hud(item)
end

function actor_item_to_ruck(item)
	if IsArtefact(item) then
		belted_arts[item:id()] = nil
		HUD:update_hud(item)
	end
end

function actor_item_to_belt(item)
	if IsArtefact(item) then
		belted_arts[item:id()] = item:section()
		HUD:update_hud(item)
	end
end

function actor_on_weapon_zoom_in(item)
	HUD:show_hud(false)
end 

function actor_on_weapon_zoom_out(item)
	HUD:show_hud(true)
end

class "slot_hud" (CUIScriptWnd)
function slot_hud:__init() super()
	self.slot = {}
	self.ini = ini_sys
	self.shown = false
	self:InitControls()
end

function slot_hud:__finalize() end

function slot_hud:InitControls()
	local xml = CScriptXmlInit()
	xml:ParseFile("ui_slot_hud.xml")
	self.static_back = xml:InitStatic("static_slot_back", self)
	self.static_back:Show(false)
	for i=1,6 do
		self.slot[i] = xml:InitStatic("static_slot_back:slot_"..i, self.static_back)
		self.slot[i]:InitTexture("ui\\ui_icon_equipment")
	end
	local function tickback()
		self:CustomUpdate()
	end
	StartTimer("slot_hud_timer", update_rate, tickback)
end

function slot_hud:Clear()
	StopTimer("slot_hud_timer")
end

function slot_hud:update_slot(section, index)
	local x1 = (self.ini:r_float_ex(section,"inv_grid_x")or 0)*50
	local y1 = (self.ini:r_float_ex(section,"inv_grid_y")or 0)*50
	local x2 = x1 + 50
	local y2 = y1 + 50
	self.slot[index]:SetTextureRect(Frect():set(x1,y1,x2,y2))
	self.slot[index]:Show(true)
end

function slot_hud:update_hud(item)
	local cnt = 0
	if (sloted_patch) then
		cnt = cnt + 1 
		self:update_slot(sloted_patch:section(),cnt)
	end
	if (table.size(belted_arts) > 0) then
		for id, sec in pairs(belted_arts) do
			cnt = cnt + 1
			self:update_slot(sec,cnt)
		end
	end
	for i=cnt+1,6 do
		self.slot[i]:Show(false)
	end
	if (cnt == 0) then
		self:show_hud(false)
	end
end

function slot_hud:show_hud(value)
	if(self.shown == value) then
		return
	end
	self.static_back:Show(value)
	self.shown = value
end

--
-- from CoC 1.5b r6
--
local slot_hud_option = "enable_slot_hud"

function slot_hud:CustomUpdate()
	self:show_hud(main_hud_shown())
	
	if (axr_main.config:r_value(MM_OPTIONS,slot_hud_option,1,true)) == false then
		if (sloted_patch ~= nil or table.size(belted_arts) > 0) then
			self:clear(0)
--			deactivate_hud()
		end
	end
end
