--
-- Next cataclysm dialog
-- Author: Dancher
--

function get_phrase_1()
	local phase = STR_EMPTY
	
	if (surge_manager.is_started() or psi_storm_manager.is_started() or fallout_manager.is_started()) then
		phase = strtransl("next_cataclysm_dialog_1_unavailable")
	else
		local next_surge_hours = nil
		local next_psi_storm_hours = nil
		local next_fallout_hours = nil
		
		if (atmosfear_options.config:r_value("atmosfear_current_parameters","opt_enable_blowout",2,1) == 1) then
			local SurgeManager = surge_manager.get_surge_manager()
			local last_surge_time = SurgeManager.last_surge_time or game.get_game_time()
			next_surge_hours = (SurgeManager._delta - game.get_game_time():diffSec(last_surge_time)) / 3600
			next_surge_hours = next_surge_hours < 1 and math.floor(next_surge_hours) or math.ceil(next_surge_hours)
		end
		
		if (atmosfear_options.config:r_value("atmosfear_current_parameters","opt_enable_psi_storm",2,1) == 1) then
			local PsiStormManager = psi_storm_manager.get_psi_storm_manager()
			local last_psi_storm_time = PsiStormManager.last_psi_storm_time or game.get_game_time()
			next_psi_storm_hours = (PsiStormManager._delta - game.get_game_time():diffSec(last_psi_storm_time)) / 3600
			next_psi_storm_hours = next_psi_storm_hours < 1 and math.floor(next_psi_storm_hours) or math.ceil(next_psi_storm_hours)
		end
		
		if (atmosfear_options.config:r_value("atmosfear_current_parameters","opt_enable_fallout",2,1) == 1) then
			local FalloutManager = fallout_manager.get_fallout_manager()
			local fallout_left_time = FalloutManager:get_time_left()
			
			if (fallout_left_time < 0) then
				next_fallout_hours = -1
			else
				next_fallout_hours = fallout_left_time / 3600
				next_fallout_hours = next_fallout_hours < 1 and math.floor(next_fallout_hours) or math.ceil(next_fallout_hours)
			end
		end
		
		if (next_surge_hours == nil and next_psi_storm_hours == nil and next_fallout_hours == nil) then
			phase = strtransl("next_cataclysm_dialog_1_unavailable")
		else
			local next_surge_string = STR_EMPTY
			local next_psi_storm_string = STR_EMPTY
			local next_fallout_string = STR_EMPTY
			local cataclysm_strings = {}
			
			if (next_surge_hours ~= nil) then
				next_surge_string = strtransl("next_cataclysm_dialog_1_surge")
				local next_surge_hours_value = next_surge_hours == 0 and strtransl("next_cataclysm_dialog_1_less_than_hour") or next_surge_hours
				next_surge_string = string.format(next_surge_string, next_surge_hours_value)
				table.insert(cataclysm_strings, next_surge_string)
			end
			
			if (next_psi_storm_hours ~= nil) then
				next_psi_storm_string = strtransl("next_cataclysm_dialog_1_psi_storm")
				local next_psi_storm_hours_value = next_psi_storm_hours == 0 and strtransl("next_cataclysm_dialog_1_less_than_hour") or next_psi_storm_hours
				next_psi_storm_string = string.format(next_psi_storm_string, next_psi_storm_hours_value)
				table.insert(cataclysm_strings, next_psi_storm_string)
			end
			
			if (next_fallout_hours ~= nil) then
				if (next_fallout_hours == -1) then
					next_fallout_string = strtransl("next_cataclysm_dialog_1_fallout_1")
				else
					next_fallout_string = strtransl("next_cataclysm_dialog_1_fallout_0")
					local next_fallout_hours_value = next_fallout_hours == 0 and strtransl("next_cataclysm_dialog_1_less_than_hour") or next_fallout_hours
					next_fallout_string = string.format(next_fallout_string, next_fallout_hours_value)
				end
				table.insert(cataclysm_strings, next_fallout_string)
			end
			
			local separator = ", "
			phase = strtransl("next_cataclysm_dialog_1_estimation") .. STR_BLANK
			
			for i,cataclysm_string in ipairs(cataclysm_strings) do
				if (i ~= 1) then
					phase = phase .. separator
				end
				phase = phase .. cataclysm_string
			end
		end
	end

	return phase
end
